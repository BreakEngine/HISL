Terminals unused in grammar

   NONE


State 1 conflicts: 1 reduce/reduce
State 57 conflicts: 1 shift/reduce
State 117 conflicts: 22 shift/reduce
State 137 conflicts: 22 shift/reduce
State 141 conflicts: 22 shift/reduce
State 171 conflicts: 1 shift/reduce
State 172 conflicts: 1 shift/reduce


Grammar

    0 $accept: program $end

    1 program: stmts

    2 stmt: func_dcl
    3     | expr_stmt
    4     | jump_stmt
    5     | var_dcl SEMICOLON
    6     | multi_var_dcl SEMICOLON
    7     | arr_dcl SEMICOLON
    8     | selection_stmt
    9     | loop_stmt
   10     | strct SEMICOLON
   11     | iobuffer SEMICOLON
   12     | stage SEMICOLON
   13     | routine SEMICOLON
   14     | gpu_program SEMICOLON
   15     | native SEMICOLON

   16 native: GLSL OPEN_CBRACE my_string CLOSE_CBRACE
   17       | HLSL OPEN_CBRACE my_string CLOSE_CBRACE

   18 my_string: STRING

   19 gpu_program: PROGRAM ident block

   20 stage: VERTEX ident block
   21      | PIXEL ident block

   22 routine: ROUTINE ident block

   23 iobuffer: IOBUFFER ident ioblock

   24 ioblock: OPEN_CBRACE iostmts CLOSE_CBRACE
   25        | OPEN_CBRACE CLOSE_CBRACE

   26 semantic_var_dcl: type ident COLON ident

   27 selection_stmt: if_stmt

   28 arr_dcl: type ident OPEN_SQBRACE numInteger CLOSE_SQBRACE
   29        | type ident OPEN_SQBRACE numInteger CLOSE_SQBRACE EQL OPEN_CBRACE init_list CLOSE_CBRACE

   30 arr_call: ident OPEN_SQBRACE expr CLOSE_SQBRACE

   31 loop_stmt: while_stmt
   32          | for_stmt

   33 if_stmt: IF OPEN_BRACE expr CLOSE_BRACE block ELSE block
   34        | IF OPEN_BRACE expr CLOSE_BRACE block ELSE stmt
   35        | IF OPEN_BRACE expr CLOSE_BRACE stmt ELSE stmt
   36        | IF OPEN_BRACE expr CLOSE_BRACE stmt ELSE block
   37        | IF OPEN_BRACE expr CLOSE_BRACE stmt
   38        | IF OPEN_BRACE expr CLOSE_BRACE block

   39 for_stmt: FOR OPEN_BRACE stmt stmt expr CLOSE_BRACE block
   40         | FOR OPEN_BRACE stmt stmt expr CLOSE_BRACE stmt

   41 while_stmt: WHILE OPEN_BRACE expr CLOSE_BRACE block
   42           | WHILE OPEN_BRACE expr CLOSE_BRACE stmt

   43 stmts: stmt
   44      | stmts stmt

   45 iostmts: semantic_var_dcl SEMICOLON
   46        | iostmts semantic_var_dcl SEMICOLON

   47 strct: STRUCT ident block

   48 expr_stmt: expr SEMICOLON

   49 func_dcl: type ident OPEN_BRACE func_dcl_args CLOSE_BRACE block

   50 block: OPEN_CBRACE stmts CLOSE_CBRACE
   51      | OPEN_CBRACE CLOSE_CBRACE

   52 numeric: numFloat
   53        | numInteger

   54 numFloat: FLOAT
   55         | MINUS FLOAT
   56         | PLUS FLOAT

   57 numInteger: INT
   58           | MINUS INT
   59           | PLUS INT

   60 expr: assignment
   61     | func_call
   62     | ident_all
   63     | expr binary_op expr
   64     | unary_expr
   65     | numeric
   66     | const_expr
   67     | OPEN_BRACE expr CLOSE_BRACE

   68 unary_expr: unary_op expr
   69           | expr INC
   70           | expr DEC

   71 const_expr: BOOLCONST

   72 func_call: ident OPEN_BRACE call_args CLOSE_BRACE
   73          | type OPEN_BRACE call_args CLOSE_BRACE

   74 jump_stmt: RETURN SEMICOLON
   75          | RETURN expr SEMICOLON

   76 ident: ID

   77 ident_all: ID
   78          | arr_call

   79 type: TYPE
   80     | ID

   81 binary_op: PLUS
   82          | MINUS
   83          | MULTIPLY
   84          | DEVIDE
   85          | EQL_Q
   86          | NEQL_Q
   87          | GREATER
   88          | LESS
   89          | GREATER_EQUAL
   90          | LESS_EQUAL
   91          | PLUS_EQL
   92          | MINUS_EQL
   93          | MULTIPLY_EQL
   94          | DEVIDE_EQL
   95          | AND
   96          | OR
   97          | AND_Q
   98          | OR_Q
   99          | DOT
  100          | ARROW

  101 unary_op: INC
  102         | DEC
  103         | MULTIPLY
  104         | AND
  105         | NOT

  106 assignment: ident_all EQL expr

  107 call_args: /* empty */
  108          | expr
  109          | call_args COMMA expr

  110 init_list: /* empty */
  111          | expr
  112          | init_list COMMA expr

  113 func_dcl_args: /* empty */
  114              | var_dcl
  115              | func_dcl_args COMMA var_dcl

  116 var_dcl: type ident
  117        | type ident EQL expr

  118 multi_var_dcl: var_dcl
  119              | multi_var_dcl COMMA ident
  120              | multi_var_dcl COMMA ident EQL expr


Terminals, with rules where they appear

$end (0) 0
error (256)
ID (258) 76 77 80
TYPE (259) 79
RETURN (260) 74 75
FLOAT (261) 54 55 56
INT (262) 57 58 59
BOOLCONST (263) 71
STRING (264) 18
OPEN_BRACE (265) 33 34 35 36 37 38 39 40 41 42 49 67 72 73
CLOSE_BRACE (266) 33 34 35 36 37 38 39 40 41 42 49 67 72 73
OPEN_CBRACE (267) 16 17 24 25 29 50 51
CLOSE_CBRACE (268) 16 17 24 25 29 50 51
SEMICOLON (269) 5 6 7 10 11 12 13 14 15 45 46 48 74 75
NONE (270)
EQL (271) 29 106 117 120
COMMA (272) 109 112 115 119 120
IF (273) 33 34 35 36 37 38
ELSE (274) 33 34 35 36
PLUS (275) 56 59 81
MINUS (276) 55 58 82
MULTIPLY (277) 83 103
DEVIDE (278) 84
NOT (279) 105
INC (280) 69 101
DEC (281) 70 102
PLUS_EQL (282) 91
MINUS_EQL (283) 92
MULTIPLY_EQL (284) 93
DEVIDE_EQL (285) 94
WHILE (286) 41 42
FOR (287) 39 40
GREATER (288) 87
LESS (289) 88
EQL_Q (290) 85
NEQL_Q (291) 86
GREATER_EQUAL (292) 89
LESS_EQUAL (293) 90
AND (294) 95 104
OR (295) 96
AND_Q (296) 97
OR_Q (297) 98
OPEN_SQBRACE (298) 28 29 30
CLOSE_SQBRACE (299) 28 29 30
STRUCT (300) 47
IOBUFFER (301) 23
COLON (302) 26
VERTEX (303) 20
PIXEL (304) 21
ROUTINE (305) 22
PROGRAM (306) 19
DOT (307) 99
ARROW (308) 100
GLSL (309) 16
HLSL (310) 17


Nonterminals, with rules where they appear

$accept (56)
    on left: 0
program (57)
    on left: 1, on right: 0
stmt (58)
    on left: 2 3 4 5 6 7 8 9 10 11 12 13 14 15, on right: 34 35 36
    37 39 40 42 43 44
native (59)
    on left: 16 17, on right: 15
my_string (60)
    on left: 18, on right: 16 17
gpu_program (61)
    on left: 19, on right: 14
stage (62)
    on left: 20 21, on right: 12
routine (63)
    on left: 22, on right: 13
iobuffer (64)
    on left: 23, on right: 11
ioblock (65)
    on left: 24 25, on right: 23
semantic_var_dcl (66)
    on left: 26, on right: 45 46
selection_stmt (67)
    on left: 27, on right: 8
arr_dcl (68)
    on left: 28 29, on right: 7
arr_call (69)
    on left: 30, on right: 78
loop_stmt (70)
    on left: 31 32, on right: 9
if_stmt (71)
    on left: 33 34 35 36 37 38, on right: 27
for_stmt (72)
    on left: 39 40, on right: 32
while_stmt (73)
    on left: 41 42, on right: 31
stmts (74)
    on left: 43 44, on right: 1 44 50
iostmts (75)
    on left: 45 46, on right: 24 46
strct (76)
    on left: 47, on right: 10
expr_stmt (77)
    on left: 48, on right: 3
func_dcl (78)
    on left: 49, on right: 2
block (79)
    on left: 50 51, on right: 19 20 21 22 33 34 36 38 39 41 47 49
numeric (80)
    on left: 52 53, on right: 65
numFloat (81)
    on left: 54 55 56, on right: 52
numInteger (82)
    on left: 57 58 59, on right: 28 29 53
expr (83)
    on left: 60 61 62 63 64 65 66 67, on right: 30 33 34 35 36 37 38
    39 40 41 42 48 63 67 68 69 70 75 106 108 109 111 112 117 120
unary_expr (84)
    on left: 68 69 70, on right: 64
const_expr (85)
    on left: 71, on right: 66
func_call (86)
    on left: 72 73, on right: 61
jump_stmt (87)
    on left: 74 75, on right: 4
ident (88)
    on left: 76, on right: 19 20 21 22 23 26 28 29 30 47 49 72 116
    117 119 120
ident_all (89)
    on left: 77 78, on right: 62 106
type (90)
    on left: 79 80, on right: 26 28 29 49 73 116 117
binary_op (91)
    on left: 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98
    99 100, on right: 63
unary_op (92)
    on left: 101 102 103 104 105, on right: 68
assignment (93)
    on left: 106, on right: 60
call_args (94)
    on left: 107 108 109, on right: 72 73 109
init_list (95)
    on left: 110 111 112, on right: 29 112
func_dcl_args (96)
    on left: 113 114 115, on right: 49 115
var_dcl (97)
    on left: 116 117, on right: 5 114 115 118
multi_var_dcl (98)
    on left: 118 119 120, on right: 6 119 120


state 0

    0 $accept: . program $end

    ID          shift, and go to state 1
    TYPE        shift, and go to state 2
    RETURN      shift, and go to state 3
    FLOAT       shift, and go to state 4
    INT         shift, and go to state 5
    BOOLCONST   shift, and go to state 6
    OPEN_BRACE  shift, and go to state 7
    IF          shift, and go to state 8
    PLUS        shift, and go to state 9
    MINUS       shift, and go to state 10
    MULTIPLY    shift, and go to state 11
    NOT         shift, and go to state 12
    INC         shift, and go to state 13
    DEC         shift, and go to state 14
    WHILE       shift, and go to state 15
    FOR         shift, and go to state 16
    AND         shift, and go to state 17
    STRUCT      shift, and go to state 18
    IOBUFFER    shift, and go to state 19
    VERTEX      shift, and go to state 20
    PIXEL       shift, and go to state 21
    ROUTINE     shift, and go to state 22
    PROGRAM     shift, and go to state 23
    GLSL        shift, and go to state 24
    HLSL        shift, and go to state 25

    program         go to state 26
    stmt            go to state 27
    native          go to state 28
    gpu_program     go to state 29
    stage           go to state 30
    routine         go to state 31
    iobuffer        go to state 32
    selection_stmt  go to state 33
    arr_dcl         go to state 34
    arr_call        go to state 35
    loop_stmt       go to state 36
    if_stmt         go to state 37
    for_stmt        go to state 38
    while_stmt      go to state 39
    stmts           go to state 40
    strct           go to state 41
    expr_stmt       go to state 42
    func_dcl        go to state 43
    numeric         go to state 44
    numFloat        go to state 45
    numInteger      go to state 46
    expr            go to state 47
    unary_expr      go to state 48
    const_expr      go to state 49
    func_call       go to state 50
    jump_stmt       go to state 51
    ident           go to state 52
    ident_all       go to state 53
    type            go to state 54
    unary_op        go to state 55
    assignment      go to state 56
    var_dcl         go to state 57
    multi_var_dcl   go to state 58


state 1

   76 ident: ID .
   77 ident_all: ID .
   80 type: ID .

    ID            reduce using rule 80 (type)
    OPEN_BRACE    reduce using rule 76 (ident)
    OPEN_BRACE    [reduce using rule 80 (type)]
    OPEN_SQBRACE  reduce using rule 76 (ident)
    $default      reduce using rule 77 (ident_all)


state 2

   79 type: TYPE .

    $default  reduce using rule 79 (type)


state 3

   74 jump_stmt: RETURN . SEMICOLON
   75          | RETURN . expr SEMICOLON

    ID          shift, and go to state 1
    TYPE        shift, and go to state 2
    FLOAT       shift, and go to state 4
    INT         shift, and go to state 5
    BOOLCONST   shift, and go to state 6
    OPEN_BRACE  shift, and go to state 7
    SEMICOLON   shift, and go to state 59
    PLUS        shift, and go to state 9
    MINUS       shift, and go to state 10
    MULTIPLY    shift, and go to state 11
    NOT         shift, and go to state 12
    INC         shift, and go to state 13
    DEC         shift, and go to state 14
    AND         shift, and go to state 17

    arr_call    go to state 35
    numeric     go to state 44
    numFloat    go to state 45
    numInteger  go to state 46
    expr        go to state 60
    unary_expr  go to state 48
    const_expr  go to state 49
    func_call   go to state 50
    ident       go to state 52
    ident_all   go to state 53
    type        go to state 61
    unary_op    go to state 55
    assignment  go to state 56


state 4

   54 numFloat: FLOAT .

    $default  reduce using rule 54 (numFloat)


state 5

   57 numInteger: INT .

    $default  reduce using rule 57 (numInteger)


state 6

   71 const_expr: BOOLCONST .

    $default  reduce using rule 71 (const_expr)


state 7

   67 expr: OPEN_BRACE . expr CLOSE_BRACE

    ID          shift, and go to state 1
    TYPE        shift, and go to state 2
    FLOAT       shift, and go to state 4
    INT         shift, and go to state 5
    BOOLCONST   shift, and go to state 6
    OPEN_BRACE  shift, and go to state 7
    PLUS        shift, and go to state 9
    MINUS       shift, and go to state 10
    MULTIPLY    shift, and go to state 11
    NOT         shift, and go to state 12
    INC         shift, and go to state 13
    DEC         shift, and go to state 14
    AND         shift, and go to state 17

    arr_call    go to state 35
    numeric     go to state 44
    numFloat    go to state 45
    numInteger  go to state 46
    expr        go to state 62
    unary_expr  go to state 48
    const_expr  go to state 49
    func_call   go to state 50
    ident       go to state 52
    ident_all   go to state 53
    type        go to state 61
    unary_op    go to state 55
    assignment  go to state 56


state 8

   33 if_stmt: IF . OPEN_BRACE expr CLOSE_BRACE block ELSE block
   34        | IF . OPEN_BRACE expr CLOSE_BRACE block ELSE stmt
   35        | IF . OPEN_BRACE expr CLOSE_BRACE stmt ELSE stmt
   36        | IF . OPEN_BRACE expr CLOSE_BRACE stmt ELSE block
   37        | IF . OPEN_BRACE expr CLOSE_BRACE stmt
   38        | IF . OPEN_BRACE expr CLOSE_BRACE block

    OPEN_BRACE  shift, and go to state 63


state 9

   56 numFloat: PLUS . FLOAT
   59 numInteger: PLUS . INT

    FLOAT  shift, and go to state 64
    INT    shift, and go to state 65


state 10

   55 numFloat: MINUS . FLOAT
   58 numInteger: MINUS . INT

    FLOAT  shift, and go to state 66
    INT    shift, and go to state 67


state 11

  103 unary_op: MULTIPLY .

    $default  reduce using rule 103 (unary_op)


state 12

  105 unary_op: NOT .

    $default  reduce using rule 105 (unary_op)


state 13

  101 unary_op: INC .

    $default  reduce using rule 101 (unary_op)


state 14

  102 unary_op: DEC .

    $default  reduce using rule 102 (unary_op)


state 15

   41 while_stmt: WHILE . OPEN_BRACE expr CLOSE_BRACE block
   42           | WHILE . OPEN_BRACE expr CLOSE_BRACE stmt

    OPEN_BRACE  shift, and go to state 68


state 16

   39 for_stmt: FOR . OPEN_BRACE stmt stmt expr CLOSE_BRACE block
   40         | FOR . OPEN_BRACE stmt stmt expr CLOSE_BRACE stmt

    OPEN_BRACE  shift, and go to state 69


state 17

  104 unary_op: AND .

    $default  reduce using rule 104 (unary_op)


state 18

   47 strct: STRUCT . ident block

    ID  shift, and go to state 70

    ident  go to state 71


state 19

   23 iobuffer: IOBUFFER . ident ioblock

    ID  shift, and go to state 70

    ident  go to state 72


state 20

   20 stage: VERTEX . ident block

    ID  shift, and go to state 70

    ident  go to state 73


state 21

   21 stage: PIXEL . ident block

    ID  shift, and go to state 70

    ident  go to state 74


state 22

   22 routine: ROUTINE . ident block

    ID  shift, and go to state 70

    ident  go to state 75


state 23

   19 gpu_program: PROGRAM . ident block

    ID  shift, and go to state 70

    ident  go to state 76


state 24

   16 native: GLSL . OPEN_CBRACE my_string CLOSE_CBRACE

    OPEN_CBRACE  shift, and go to state 77


state 25

   17 native: HLSL . OPEN_CBRACE my_string CLOSE_CBRACE

    OPEN_CBRACE  shift, and go to state 78


state 26

    0 $accept: program . $end

    $end  shift, and go to state 79


state 27

   43 stmts: stmt .

    $default  reduce using rule 43 (stmts)


state 28

   15 stmt: native . SEMICOLON

    SEMICOLON  shift, and go to state 80


state 29

   14 stmt: gpu_program . SEMICOLON

    SEMICOLON  shift, and go to state 81


state 30

   12 stmt: stage . SEMICOLON

    SEMICOLON  shift, and go to state 82


state 31

   13 stmt: routine . SEMICOLON

    SEMICOLON  shift, and go to state 83


state 32

   11 stmt: iobuffer . SEMICOLON

    SEMICOLON  shift, and go to state 84


state 33

    8 stmt: selection_stmt .

    $default  reduce using rule 8 (stmt)


state 34

    7 stmt: arr_dcl . SEMICOLON

    SEMICOLON  shift, and go to state 85


state 35

   78 ident_all: arr_call .

    $default  reduce using rule 78 (ident_all)


state 36

    9 stmt: loop_stmt .

    $default  reduce using rule 9 (stmt)


state 37

   27 selection_stmt: if_stmt .

    $default  reduce using rule 27 (selection_stmt)


state 38

   32 loop_stmt: for_stmt .

    $default  reduce using rule 32 (loop_stmt)


state 39

   31 loop_stmt: while_stmt .

    $default  reduce using rule 31 (loop_stmt)


state 40

    1 program: stmts .
   44 stmts: stmts . stmt

    ID          shift, and go to state 1
    TYPE        shift, and go to state 2
    RETURN      shift, and go to state 3
    FLOAT       shift, and go to state 4
    INT         shift, and go to state 5
    BOOLCONST   shift, and go to state 6
    OPEN_BRACE  shift, and go to state 7
    IF          shift, and go to state 8
    PLUS        shift, and go to state 9
    MINUS       shift, and go to state 10
    MULTIPLY    shift, and go to state 11
    NOT         shift, and go to state 12
    INC         shift, and go to state 13
    DEC         shift, and go to state 14
    WHILE       shift, and go to state 15
    FOR         shift, and go to state 16
    AND         shift, and go to state 17
    STRUCT      shift, and go to state 18
    IOBUFFER    shift, and go to state 19
    VERTEX      shift, and go to state 20
    PIXEL       shift, and go to state 21
    ROUTINE     shift, and go to state 22
    PROGRAM     shift, and go to state 23
    GLSL        shift, and go to state 24
    HLSL        shift, and go to state 25

    $default  reduce using rule 1 (program)

    stmt            go to state 86
    native          go to state 28
    gpu_program     go to state 29
    stage           go to state 30
    routine         go to state 31
    iobuffer        go to state 32
    selection_stmt  go to state 33
    arr_dcl         go to state 34
    arr_call        go to state 35
    loop_stmt       go to state 36
    if_stmt         go to state 37
    for_stmt        go to state 38
    while_stmt      go to state 39
    strct           go to state 41
    expr_stmt       go to state 42
    func_dcl        go to state 43
    numeric         go to state 44
    numFloat        go to state 45
    numInteger      go to state 46
    expr            go to state 47
    unary_expr      go to state 48
    const_expr      go to state 49
    func_call       go to state 50
    jump_stmt       go to state 51
    ident           go to state 52
    ident_all       go to state 53
    type            go to state 54
    unary_op        go to state 55
    assignment      go to state 56
    var_dcl         go to state 57
    multi_var_dcl   go to state 58


state 41

   10 stmt: strct . SEMICOLON

    SEMICOLON  shift, and go to state 87


state 42

    3 stmt: expr_stmt .

    $default  reduce using rule 3 (stmt)


state 43

    2 stmt: func_dcl .

    $default  reduce using rule 2 (stmt)


state 44

   65 expr: numeric .

    $default  reduce using rule 65 (expr)


state 45

   52 numeric: numFloat .

    $default  reduce using rule 52 (numeric)


state 46

   53 numeric: numInteger .

    $default  reduce using rule 53 (numeric)


state 47

   48 expr_stmt: expr . SEMICOLON
   63 expr: expr . binary_op expr
   69 unary_expr: expr . INC
   70           | expr . DEC

    SEMICOLON      shift, and go to state 88
    PLUS           shift, and go to state 89
    MINUS          shift, and go to state 90
    MULTIPLY       shift, and go to state 91
    DEVIDE         shift, and go to state 92
    INC            shift, and go to state 93
    DEC            shift, and go to state 94
    PLUS_EQL       shift, and go to state 95
    MINUS_EQL      shift, and go to state 96
    MULTIPLY_EQL   shift, and go to state 97
    DEVIDE_EQL     shift, and go to state 98
    GREATER        shift, and go to state 99
    LESS           shift, and go to state 100
    EQL_Q          shift, and go to state 101
    NEQL_Q         shift, and go to state 102
    GREATER_EQUAL  shift, and go to state 103
    LESS_EQUAL     shift, and go to state 104
    AND            shift, and go to state 105
    OR             shift, and go to state 106
    AND_Q          shift, and go to state 107
    OR_Q           shift, and go to state 108
    DOT            shift, and go to state 109
    ARROW          shift, and go to state 110

    binary_op  go to state 111


state 48

   64 expr: unary_expr .

    $default  reduce using rule 64 (expr)


state 49

   66 expr: const_expr .

    $default  reduce using rule 66 (expr)


state 50

   61 expr: func_call .

    $default  reduce using rule 61 (expr)


state 51

    4 stmt: jump_stmt .

    $default  reduce using rule 4 (stmt)


state 52

   30 arr_call: ident . OPEN_SQBRACE expr CLOSE_SQBRACE
   72 func_call: ident . OPEN_BRACE call_args CLOSE_BRACE

    OPEN_BRACE    shift, and go to state 112
    OPEN_SQBRACE  shift, and go to state 113


state 53

   62 expr: ident_all .
  106 assignment: ident_all . EQL expr

    EQL  shift, and go to state 114

    $default  reduce using rule 62 (expr)


state 54

   28 arr_dcl: type . ident OPEN_SQBRACE numInteger CLOSE_SQBRACE
   29        | type . ident OPEN_SQBRACE numInteger CLOSE_SQBRACE EQL OPEN_CBRACE init_list CLOSE_CBRACE
   49 func_dcl: type . ident OPEN_BRACE func_dcl_args CLOSE_BRACE block
   73 func_call: type . OPEN_BRACE call_args CLOSE_BRACE
  116 var_dcl: type . ident
  117        | type . ident EQL expr

    ID          shift, and go to state 70
    OPEN_BRACE  shift, and go to state 115

    ident  go to state 116


state 55

   68 unary_expr: unary_op . expr

    ID          shift, and go to state 1
    TYPE        shift, and go to state 2
    FLOAT       shift, and go to state 4
    INT         shift, and go to state 5
    BOOLCONST   shift, and go to state 6
    OPEN_BRACE  shift, and go to state 7
    PLUS        shift, and go to state 9
    MINUS       shift, and go to state 10
    MULTIPLY    shift, and go to state 11
    NOT         shift, and go to state 12
    INC         shift, and go to state 13
    DEC         shift, and go to state 14
    AND         shift, and go to state 17

    arr_call    go to state 35
    numeric     go to state 44
    numFloat    go to state 45
    numInteger  go to state 46
    expr        go to state 117
    unary_expr  go to state 48
    const_expr  go to state 49
    func_call   go to state 50
    ident       go to state 52
    ident_all   go to state 53
    type        go to state 61
    unary_op    go to state 55
    assignment  go to state 56


state 56

   60 expr: assignment .

    $default  reduce using rule 60 (expr)


state 57

    5 stmt: var_dcl . SEMICOLON
  118 multi_var_dcl: var_dcl .

    SEMICOLON  shift, and go to state 118

    SEMICOLON  [reduce using rule 118 (multi_var_dcl)]
    $default   reduce using rule 118 (multi_var_dcl)


state 58

    6 stmt: multi_var_dcl . SEMICOLON
  119 multi_var_dcl: multi_var_dcl . COMMA ident
  120              | multi_var_dcl . COMMA ident EQL expr

    SEMICOLON  shift, and go to state 119
    COMMA      shift, and go to state 120


state 59

   74 jump_stmt: RETURN SEMICOLON .

    $default  reduce using rule 74 (jump_stmt)


state 60

   63 expr: expr . binary_op expr
   69 unary_expr: expr . INC
   70           | expr . DEC
   75 jump_stmt: RETURN expr . SEMICOLON

    SEMICOLON      shift, and go to state 121
    PLUS           shift, and go to state 89
    MINUS          shift, and go to state 90
    MULTIPLY       shift, and go to state 91
    DEVIDE         shift, and go to state 92
    INC            shift, and go to state 93
    DEC            shift, and go to state 94
    PLUS_EQL       shift, and go to state 95
    MINUS_EQL      shift, and go to state 96
    MULTIPLY_EQL   shift, and go to state 97
    DEVIDE_EQL     shift, and go to state 98
    GREATER        shift, and go to state 99
    LESS           shift, and go to state 100
    EQL_Q          shift, and go to state 101
    NEQL_Q         shift, and go to state 102
    GREATER_EQUAL  shift, and go to state 103
    LESS_EQUAL     shift, and go to state 104
    AND            shift, and go to state 105
    OR             shift, and go to state 106
    AND_Q          shift, and go to state 107
    OR_Q           shift, and go to state 108
    DOT            shift, and go to state 109
    ARROW          shift, and go to state 110

    binary_op  go to state 111


state 61

   73 func_call: type . OPEN_BRACE call_args CLOSE_BRACE

    OPEN_BRACE  shift, and go to state 115


state 62

   63 expr: expr . binary_op expr
   67     | OPEN_BRACE expr . CLOSE_BRACE
   69 unary_expr: expr . INC
   70           | expr . DEC

    CLOSE_BRACE    shift, and go to state 122
    PLUS           shift, and go to state 89
    MINUS          shift, and go to state 90
    MULTIPLY       shift, and go to state 91
    DEVIDE         shift, and go to state 92
    INC            shift, and go to state 93
    DEC            shift, and go to state 94
    PLUS_EQL       shift, and go to state 95
    MINUS_EQL      shift, and go to state 96
    MULTIPLY_EQL   shift, and go to state 97
    DEVIDE_EQL     shift, and go to state 98
    GREATER        shift, and go to state 99
    LESS           shift, and go to state 100
    EQL_Q          shift, and go to state 101
    NEQL_Q         shift, and go to state 102
    GREATER_EQUAL  shift, and go to state 103
    LESS_EQUAL     shift, and go to state 104
    AND            shift, and go to state 105
    OR             shift, and go to state 106
    AND_Q          shift, and go to state 107
    OR_Q           shift, and go to state 108
    DOT            shift, and go to state 109
    ARROW          shift, and go to state 110

    binary_op  go to state 111


state 63

   33 if_stmt: IF OPEN_BRACE . expr CLOSE_BRACE block ELSE block
   34        | IF OPEN_BRACE . expr CLOSE_BRACE block ELSE stmt
   35        | IF OPEN_BRACE . expr CLOSE_BRACE stmt ELSE stmt
   36        | IF OPEN_BRACE . expr CLOSE_BRACE stmt ELSE block
   37        | IF OPEN_BRACE . expr CLOSE_BRACE stmt
   38        | IF OPEN_BRACE . expr CLOSE_BRACE block

    ID          shift, and go to state 1
    TYPE        shift, and go to state 2
    FLOAT       shift, and go to state 4
    INT         shift, and go to state 5
    BOOLCONST   shift, and go to state 6
    OPEN_BRACE  shift, and go to state 7
    PLUS        shift, and go to state 9
    MINUS       shift, and go to state 10
    MULTIPLY    shift, and go to state 11
    NOT         shift, and go to state 12
    INC         shift, and go to state 13
    DEC         shift, and go to state 14
    AND         shift, and go to state 17

    arr_call    go to state 35
    numeric     go to state 44
    numFloat    go to state 45
    numInteger  go to state 46
    expr        go to state 123
    unary_expr  go to state 48
    const_expr  go to state 49
    func_call   go to state 50
    ident       go to state 52
    ident_all   go to state 53
    type        go to state 61
    unary_op    go to state 55
    assignment  go to state 56


state 64

   56 numFloat: PLUS FLOAT .

    $default  reduce using rule 56 (numFloat)


state 65

   59 numInteger: PLUS INT .

    $default  reduce using rule 59 (numInteger)


state 66

   55 numFloat: MINUS FLOAT .

    $default  reduce using rule 55 (numFloat)


state 67

   58 numInteger: MINUS INT .

    $default  reduce using rule 58 (numInteger)


state 68

   41 while_stmt: WHILE OPEN_BRACE . expr CLOSE_BRACE block
   42           | WHILE OPEN_BRACE . expr CLOSE_BRACE stmt

    ID          shift, and go to state 1
    TYPE        shift, and go to state 2
    FLOAT       shift, and go to state 4
    INT         shift, and go to state 5
    BOOLCONST   shift, and go to state 6
    OPEN_BRACE  shift, and go to state 7
    PLUS        shift, and go to state 9
    MINUS       shift, and go to state 10
    MULTIPLY    shift, and go to state 11
    NOT         shift, and go to state 12
    INC         shift, and go to state 13
    DEC         shift, and go to state 14
    AND         shift, and go to state 17

    arr_call    go to state 35
    numeric     go to state 44
    numFloat    go to state 45
    numInteger  go to state 46
    expr        go to state 124
    unary_expr  go to state 48
    const_expr  go to state 49
    func_call   go to state 50
    ident       go to state 52
    ident_all   go to state 53
    type        go to state 61
    unary_op    go to state 55
    assignment  go to state 56


state 69

   39 for_stmt: FOR OPEN_BRACE . stmt stmt expr CLOSE_BRACE block
   40         | FOR OPEN_BRACE . stmt stmt expr CLOSE_BRACE stmt

    ID          shift, and go to state 1
    TYPE        shift, and go to state 2
    RETURN      shift, and go to state 3
    FLOAT       shift, and go to state 4
    INT         shift, and go to state 5
    BOOLCONST   shift, and go to state 6
    OPEN_BRACE  shift, and go to state 7
    IF          shift, and go to state 8
    PLUS        shift, and go to state 9
    MINUS       shift, and go to state 10
    MULTIPLY    shift, and go to state 11
    NOT         shift, and go to state 12
    INC         shift, and go to state 13
    DEC         shift, and go to state 14
    WHILE       shift, and go to state 15
    FOR         shift, and go to state 16
    AND         shift, and go to state 17
    STRUCT      shift, and go to state 18
    IOBUFFER    shift, and go to state 19
    VERTEX      shift, and go to state 20
    PIXEL       shift, and go to state 21
    ROUTINE     shift, and go to state 22
    PROGRAM     shift, and go to state 23
    GLSL        shift, and go to state 24
    HLSL        shift, and go to state 25

    stmt            go to state 125
    native          go to state 28
    gpu_program     go to state 29
    stage           go to state 30
    routine         go to state 31
    iobuffer        go to state 32
    selection_stmt  go to state 33
    arr_dcl         go to state 34
    arr_call        go to state 35
    loop_stmt       go to state 36
    if_stmt         go to state 37
    for_stmt        go to state 38
    while_stmt      go to state 39
    strct           go to state 41
    expr_stmt       go to state 42
    func_dcl        go to state 43
    numeric         go to state 44
    numFloat        go to state 45
    numInteger      go to state 46
    expr            go to state 47
    unary_expr      go to state 48
    const_expr      go to state 49
    func_call       go to state 50
    jump_stmt       go to state 51
    ident           go to state 52
    ident_all       go to state 53
    type            go to state 54
    unary_op        go to state 55
    assignment      go to state 56
    var_dcl         go to state 57
    multi_var_dcl   go to state 58


state 70

   76 ident: ID .

    $default  reduce using rule 76 (ident)


state 71

   47 strct: STRUCT ident . block

    OPEN_CBRACE  shift, and go to state 126

    block  go to state 127


state 72

   23 iobuffer: IOBUFFER ident . ioblock

    OPEN_CBRACE  shift, and go to state 128

    ioblock  go to state 129


state 73

   20 stage: VERTEX ident . block

    OPEN_CBRACE  shift, and go to state 126

    block  go to state 130


state 74

   21 stage: PIXEL ident . block

    OPEN_CBRACE  shift, and go to state 126

    block  go to state 131


state 75

   22 routine: ROUTINE ident . block

    OPEN_CBRACE  shift, and go to state 126

    block  go to state 132


state 76

   19 gpu_program: PROGRAM ident . block

    OPEN_CBRACE  shift, and go to state 126

    block  go to state 133


state 77

   16 native: GLSL OPEN_CBRACE . my_string CLOSE_CBRACE

    STRING  shift, and go to state 134

    my_string  go to state 135


state 78

   17 native: HLSL OPEN_CBRACE . my_string CLOSE_CBRACE

    STRING  shift, and go to state 134

    my_string  go to state 136


state 79

    0 $accept: program $end .

    $default  accept


state 80

   15 stmt: native SEMICOLON .

    $default  reduce using rule 15 (stmt)


state 81

   14 stmt: gpu_program SEMICOLON .

    $default  reduce using rule 14 (stmt)


state 82

   12 stmt: stage SEMICOLON .

    $default  reduce using rule 12 (stmt)


state 83

   13 stmt: routine SEMICOLON .

    $default  reduce using rule 13 (stmt)


state 84

   11 stmt: iobuffer SEMICOLON .

    $default  reduce using rule 11 (stmt)


state 85

    7 stmt: arr_dcl SEMICOLON .

    $default  reduce using rule 7 (stmt)


state 86

   44 stmts: stmts stmt .

    $default  reduce using rule 44 (stmts)


state 87

   10 stmt: strct SEMICOLON .

    $default  reduce using rule 10 (stmt)


state 88

   48 expr_stmt: expr SEMICOLON .

    $default  reduce using rule 48 (expr_stmt)


state 89

   81 binary_op: PLUS .

    $default  reduce using rule 81 (binary_op)


state 90

   82 binary_op: MINUS .

    $default  reduce using rule 82 (binary_op)


state 91

   83 binary_op: MULTIPLY .

    $default  reduce using rule 83 (binary_op)


state 92

   84 binary_op: DEVIDE .

    $default  reduce using rule 84 (binary_op)


state 93

   69 unary_expr: expr INC .

    $default  reduce using rule 69 (unary_expr)


state 94

   70 unary_expr: expr DEC .

    $default  reduce using rule 70 (unary_expr)


state 95

   91 binary_op: PLUS_EQL .

    $default  reduce using rule 91 (binary_op)


state 96

   92 binary_op: MINUS_EQL .

    $default  reduce using rule 92 (binary_op)


state 97

   93 binary_op: MULTIPLY_EQL .

    $default  reduce using rule 93 (binary_op)


state 98

   94 binary_op: DEVIDE_EQL .

    $default  reduce using rule 94 (binary_op)


state 99

   87 binary_op: GREATER .

    $default  reduce using rule 87 (binary_op)


state 100

   88 binary_op: LESS .

    $default  reduce using rule 88 (binary_op)


state 101

   85 binary_op: EQL_Q .

    $default  reduce using rule 85 (binary_op)


state 102

   86 binary_op: NEQL_Q .

    $default  reduce using rule 86 (binary_op)


state 103

   89 binary_op: GREATER_EQUAL .

    $default  reduce using rule 89 (binary_op)


state 104

   90 binary_op: LESS_EQUAL .

    $default  reduce using rule 90 (binary_op)


state 105

   95 binary_op: AND .

    $default  reduce using rule 95 (binary_op)


state 106

   96 binary_op: OR .

    $default  reduce using rule 96 (binary_op)


state 107

   97 binary_op: AND_Q .

    $default  reduce using rule 97 (binary_op)


state 108

   98 binary_op: OR_Q .

    $default  reduce using rule 98 (binary_op)


state 109

   99 binary_op: DOT .

    $default  reduce using rule 99 (binary_op)


state 110

  100 binary_op: ARROW .

    $default  reduce using rule 100 (binary_op)


state 111

   63 expr: expr binary_op . expr

    ID          shift, and go to state 1
    TYPE        shift, and go to state 2
    FLOAT       shift, and go to state 4
    INT         shift, and go to state 5
    BOOLCONST   shift, and go to state 6
    OPEN_BRACE  shift, and go to state 7
    PLUS        shift, and go to state 9
    MINUS       shift, and go to state 10
    MULTIPLY    shift, and go to state 11
    NOT         shift, and go to state 12
    INC         shift, and go to state 13
    DEC         shift, and go to state 14
    AND         shift, and go to state 17

    arr_call    go to state 35
    numeric     go to state 44
    numFloat    go to state 45
    numInteger  go to state 46
    expr        go to state 137
    unary_expr  go to state 48
    const_expr  go to state 49
    func_call   go to state 50
    ident       go to state 52
    ident_all   go to state 53
    type        go to state 61
    unary_op    go to state 55
    assignment  go to state 56


state 112

   72 func_call: ident OPEN_BRACE . call_args CLOSE_BRACE

    ID          shift, and go to state 1
    TYPE        shift, and go to state 2
    FLOAT       shift, and go to state 4
    INT         shift, and go to state 5
    BOOLCONST   shift, and go to state 6
    OPEN_BRACE  shift, and go to state 7
    PLUS        shift, and go to state 9
    MINUS       shift, and go to state 10
    MULTIPLY    shift, and go to state 11
    NOT         shift, and go to state 12
    INC         shift, and go to state 13
    DEC         shift, and go to state 14
    AND         shift, and go to state 17

    $default  reduce using rule 107 (call_args)

    arr_call    go to state 35
    numeric     go to state 44
    numFloat    go to state 45
    numInteger  go to state 46
    expr        go to state 138
    unary_expr  go to state 48
    const_expr  go to state 49
    func_call   go to state 50
    ident       go to state 52
    ident_all   go to state 53
    type        go to state 61
    unary_op    go to state 55
    assignment  go to state 56
    call_args   go to state 139


state 113

   30 arr_call: ident OPEN_SQBRACE . expr CLOSE_SQBRACE

    ID          shift, and go to state 1
    TYPE        shift, and go to state 2
    FLOAT       shift, and go to state 4
    INT         shift, and go to state 5
    BOOLCONST   shift, and go to state 6
    OPEN_BRACE  shift, and go to state 7
    PLUS        shift, and go to state 9
    MINUS       shift, and go to state 10
    MULTIPLY    shift, and go to state 11
    NOT         shift, and go to state 12
    INC         shift, and go to state 13
    DEC         shift, and go to state 14
    AND         shift, and go to state 17

    arr_call    go to state 35
    numeric     go to state 44
    numFloat    go to state 45
    numInteger  go to state 46
    expr        go to state 140
    unary_expr  go to state 48
    const_expr  go to state 49
    func_call   go to state 50
    ident       go to state 52
    ident_all   go to state 53
    type        go to state 61
    unary_op    go to state 55
    assignment  go to state 56


state 114

  106 assignment: ident_all EQL . expr

    ID          shift, and go to state 1
    TYPE        shift, and go to state 2
    FLOAT       shift, and go to state 4
    INT         shift, and go to state 5
    BOOLCONST   shift, and go to state 6
    OPEN_BRACE  shift, and go to state 7
    PLUS        shift, and go to state 9
    MINUS       shift, and go to state 10
    MULTIPLY    shift, and go to state 11
    NOT         shift, and go to state 12
    INC         shift, and go to state 13
    DEC         shift, and go to state 14
    AND         shift, and go to state 17

    arr_call    go to state 35
    numeric     go to state 44
    numFloat    go to state 45
    numInteger  go to state 46
    expr        go to state 141
    unary_expr  go to state 48
    const_expr  go to state 49
    func_call   go to state 50
    ident       go to state 52
    ident_all   go to state 53
    type        go to state 61
    unary_op    go to state 55
    assignment  go to state 56


state 115

   73 func_call: type OPEN_BRACE . call_args CLOSE_BRACE

    ID          shift, and go to state 1
    TYPE        shift, and go to state 2
    FLOAT       shift, and go to state 4
    INT         shift, and go to state 5
    BOOLCONST   shift, and go to state 6
    OPEN_BRACE  shift, and go to state 7
    PLUS        shift, and go to state 9
    MINUS       shift, and go to state 10
    MULTIPLY    shift, and go to state 11
    NOT         shift, and go to state 12
    INC         shift, and go to state 13
    DEC         shift, and go to state 14
    AND         shift, and go to state 17

    $default  reduce using rule 107 (call_args)

    arr_call    go to state 35
    numeric     go to state 44
    numFloat    go to state 45
    numInteger  go to state 46
    expr        go to state 138
    unary_expr  go to state 48
    const_expr  go to state 49
    func_call   go to state 50
    ident       go to state 52
    ident_all   go to state 53
    type        go to state 61
    unary_op    go to state 55
    assignment  go to state 56
    call_args   go to state 142


state 116

   28 arr_dcl: type ident . OPEN_SQBRACE numInteger CLOSE_SQBRACE
   29        | type ident . OPEN_SQBRACE numInteger CLOSE_SQBRACE EQL OPEN_CBRACE init_list CLOSE_CBRACE
   49 func_dcl: type ident . OPEN_BRACE func_dcl_args CLOSE_BRACE block
  116 var_dcl: type ident .
  117        | type ident . EQL expr

    OPEN_BRACE    shift, and go to state 143
    EQL           shift, and go to state 144
    OPEN_SQBRACE  shift, and go to state 145

    $default  reduce using rule 116 (var_dcl)


state 117

   63 expr: expr . binary_op expr
   68 unary_expr: unary_op expr .
   69           | expr . INC
   70           | expr . DEC

    PLUS           shift, and go to state 89
    MINUS          shift, and go to state 90
    MULTIPLY       shift, and go to state 91
    DEVIDE         shift, and go to state 92
    INC            shift, and go to state 93
    DEC            shift, and go to state 94
    PLUS_EQL       shift, and go to state 95
    MINUS_EQL      shift, and go to state 96
    MULTIPLY_EQL   shift, and go to state 97
    DEVIDE_EQL     shift, and go to state 98
    GREATER        shift, and go to state 99
    LESS           shift, and go to state 100
    EQL_Q          shift, and go to state 101
    NEQL_Q         shift, and go to state 102
    GREATER_EQUAL  shift, and go to state 103
    LESS_EQUAL     shift, and go to state 104
    AND            shift, and go to state 105
    OR             shift, and go to state 106
    AND_Q          shift, and go to state 107
    OR_Q           shift, and go to state 108
    DOT            shift, and go to state 109
    ARROW          shift, and go to state 110

    PLUS           [reduce using rule 68 (unary_expr)]
    MINUS          [reduce using rule 68 (unary_expr)]
    MULTIPLY       [reduce using rule 68 (unary_expr)]
    DEVIDE         [reduce using rule 68 (unary_expr)]
    INC            [reduce using rule 68 (unary_expr)]
    DEC            [reduce using rule 68 (unary_expr)]
    PLUS_EQL       [reduce using rule 68 (unary_expr)]
    MINUS_EQL      [reduce using rule 68 (unary_expr)]
    MULTIPLY_EQL   [reduce using rule 68 (unary_expr)]
    DEVIDE_EQL     [reduce using rule 68 (unary_expr)]
    GREATER        [reduce using rule 68 (unary_expr)]
    LESS           [reduce using rule 68 (unary_expr)]
    EQL_Q          [reduce using rule 68 (unary_expr)]
    NEQL_Q         [reduce using rule 68 (unary_expr)]
    GREATER_EQUAL  [reduce using rule 68 (unary_expr)]
    LESS_EQUAL     [reduce using rule 68 (unary_expr)]
    AND            [reduce using rule 68 (unary_expr)]
    OR             [reduce using rule 68 (unary_expr)]
    AND_Q          [reduce using rule 68 (unary_expr)]
    OR_Q           [reduce using rule 68 (unary_expr)]
    DOT            [reduce using rule 68 (unary_expr)]
    ARROW          [reduce using rule 68 (unary_expr)]
    $default       reduce using rule 68 (unary_expr)

    binary_op  go to state 111


state 118

    5 stmt: var_dcl SEMICOLON .

    $default  reduce using rule 5 (stmt)


state 119

    6 stmt: multi_var_dcl SEMICOLON .

    $default  reduce using rule 6 (stmt)


state 120

  119 multi_var_dcl: multi_var_dcl COMMA . ident
  120              | multi_var_dcl COMMA . ident EQL expr

    ID  shift, and go to state 70

    ident  go to state 146


state 121

   75 jump_stmt: RETURN expr SEMICOLON .

    $default  reduce using rule 75 (jump_stmt)


state 122

   67 expr: OPEN_BRACE expr CLOSE_BRACE .

    $default  reduce using rule 67 (expr)


state 123

   33 if_stmt: IF OPEN_BRACE expr . CLOSE_BRACE block ELSE block
   34        | IF OPEN_BRACE expr . CLOSE_BRACE block ELSE stmt
   35        | IF OPEN_BRACE expr . CLOSE_BRACE stmt ELSE stmt
   36        | IF OPEN_BRACE expr . CLOSE_BRACE stmt ELSE block
   37        | IF OPEN_BRACE expr . CLOSE_BRACE stmt
   38        | IF OPEN_BRACE expr . CLOSE_BRACE block
   63 expr: expr . binary_op expr
   69 unary_expr: expr . INC
   70           | expr . DEC

    CLOSE_BRACE    shift, and go to state 147
    PLUS           shift, and go to state 89
    MINUS          shift, and go to state 90
    MULTIPLY       shift, and go to state 91
    DEVIDE         shift, and go to state 92
    INC            shift, and go to state 93
    DEC            shift, and go to state 94
    PLUS_EQL       shift, and go to state 95
    MINUS_EQL      shift, and go to state 96
    MULTIPLY_EQL   shift, and go to state 97
    DEVIDE_EQL     shift, and go to state 98
    GREATER        shift, and go to state 99
    LESS           shift, and go to state 100
    EQL_Q          shift, and go to state 101
    NEQL_Q         shift, and go to state 102
    GREATER_EQUAL  shift, and go to state 103
    LESS_EQUAL     shift, and go to state 104
    AND            shift, and go to state 105
    OR             shift, and go to state 106
    AND_Q          shift, and go to state 107
    OR_Q           shift, and go to state 108
    DOT            shift, and go to state 109
    ARROW          shift, and go to state 110

    binary_op  go to state 111


state 124

   41 while_stmt: WHILE OPEN_BRACE expr . CLOSE_BRACE block
   42           | WHILE OPEN_BRACE expr . CLOSE_BRACE stmt
   63 expr: expr . binary_op expr
   69 unary_expr: expr . INC
   70           | expr . DEC

    CLOSE_BRACE    shift, and go to state 148
    PLUS           shift, and go to state 89
    MINUS          shift, and go to state 90
    MULTIPLY       shift, and go to state 91
    DEVIDE         shift, and go to state 92
    INC            shift, and go to state 93
    DEC            shift, and go to state 94
    PLUS_EQL       shift, and go to state 95
    MINUS_EQL      shift, and go to state 96
    MULTIPLY_EQL   shift, and go to state 97
    DEVIDE_EQL     shift, and go to state 98
    GREATER        shift, and go to state 99
    LESS           shift, and go to state 100
    EQL_Q          shift, and go to state 101
    NEQL_Q         shift, and go to state 102
    GREATER_EQUAL  shift, and go to state 103
    LESS_EQUAL     shift, and go to state 104
    AND            shift, and go to state 105
    OR             shift, and go to state 106
    AND_Q          shift, and go to state 107
    OR_Q           shift, and go to state 108
    DOT            shift, and go to state 109
    ARROW          shift, and go to state 110

    binary_op  go to state 111


state 125

   39 for_stmt: FOR OPEN_BRACE stmt . stmt expr CLOSE_BRACE block
   40         | FOR OPEN_BRACE stmt . stmt expr CLOSE_BRACE stmt

    ID          shift, and go to state 1
    TYPE        shift, and go to state 2
    RETURN      shift, and go to state 3
    FLOAT       shift, and go to state 4
    INT         shift, and go to state 5
    BOOLCONST   shift, and go to state 6
    OPEN_BRACE  shift, and go to state 7
    IF          shift, and go to state 8
    PLUS        shift, and go to state 9
    MINUS       shift, and go to state 10
    MULTIPLY    shift, and go to state 11
    NOT         shift, and go to state 12
    INC         shift, and go to state 13
    DEC         shift, and go to state 14
    WHILE       shift, and go to state 15
    FOR         shift, and go to state 16
    AND         shift, and go to state 17
    STRUCT      shift, and go to state 18
    IOBUFFER    shift, and go to state 19
    VERTEX      shift, and go to state 20
    PIXEL       shift, and go to state 21
    ROUTINE     shift, and go to state 22
    PROGRAM     shift, and go to state 23
    GLSL        shift, and go to state 24
    HLSL        shift, and go to state 25

    stmt            go to state 149
    native          go to state 28
    gpu_program     go to state 29
    stage           go to state 30
    routine         go to state 31
    iobuffer        go to state 32
    selection_stmt  go to state 33
    arr_dcl         go to state 34
    arr_call        go to state 35
    loop_stmt       go to state 36
    if_stmt         go to state 37
    for_stmt        go to state 38
    while_stmt      go to state 39
    strct           go to state 41
    expr_stmt       go to state 42
    func_dcl        go to state 43
    numeric         go to state 44
    numFloat        go to state 45
    numInteger      go to state 46
    expr            go to state 47
    unary_expr      go to state 48
    const_expr      go to state 49
    func_call       go to state 50
    jump_stmt       go to state 51
    ident           go to state 52
    ident_all       go to state 53
    type            go to state 54
    unary_op        go to state 55
    assignment      go to state 56
    var_dcl         go to state 57
    multi_var_dcl   go to state 58


state 126

   50 block: OPEN_CBRACE . stmts CLOSE_CBRACE
   51      | OPEN_CBRACE . CLOSE_CBRACE

    ID            shift, and go to state 1
    TYPE          shift, and go to state 2
    RETURN        shift, and go to state 3
    FLOAT         shift, and go to state 4
    INT           shift, and go to state 5
    BOOLCONST     shift, and go to state 6
    OPEN_BRACE    shift, and go to state 7
    CLOSE_CBRACE  shift, and go to state 150
    IF            shift, and go to state 8
    PLUS          shift, and go to state 9
    MINUS         shift, and go to state 10
    MULTIPLY      shift, and go to state 11
    NOT           shift, and go to state 12
    INC           shift, and go to state 13
    DEC           shift, and go to state 14
    WHILE         shift, and go to state 15
    FOR           shift, and go to state 16
    AND           shift, and go to state 17
    STRUCT        shift, and go to state 18
    IOBUFFER      shift, and go to state 19
    VERTEX        shift, and go to state 20
    PIXEL         shift, and go to state 21
    ROUTINE       shift, and go to state 22
    PROGRAM       shift, and go to state 23
    GLSL          shift, and go to state 24
    HLSL          shift, and go to state 25

    stmt            go to state 27
    native          go to state 28
    gpu_program     go to state 29
    stage           go to state 30
    routine         go to state 31
    iobuffer        go to state 32
    selection_stmt  go to state 33
    arr_dcl         go to state 34
    arr_call        go to state 35
    loop_stmt       go to state 36
    if_stmt         go to state 37
    for_stmt        go to state 38
    while_stmt      go to state 39
    stmts           go to state 151
    strct           go to state 41
    expr_stmt       go to state 42
    func_dcl        go to state 43
    numeric         go to state 44
    numFloat        go to state 45
    numInteger      go to state 46
    expr            go to state 47
    unary_expr      go to state 48
    const_expr      go to state 49
    func_call       go to state 50
    jump_stmt       go to state 51
    ident           go to state 52
    ident_all       go to state 53
    type            go to state 54
    unary_op        go to state 55
    assignment      go to state 56
    var_dcl         go to state 57
    multi_var_dcl   go to state 58


state 127

   47 strct: STRUCT ident block .

    $default  reduce using rule 47 (strct)


state 128

   24 ioblock: OPEN_CBRACE . iostmts CLOSE_CBRACE
   25        | OPEN_CBRACE . CLOSE_CBRACE

    ID            shift, and go to state 152
    TYPE          shift, and go to state 2
    CLOSE_CBRACE  shift, and go to state 153

    semantic_var_dcl  go to state 154
    iostmts           go to state 155
    type              go to state 156


state 129

   23 iobuffer: IOBUFFER ident ioblock .

    $default  reduce using rule 23 (iobuffer)


state 130

   20 stage: VERTEX ident block .

    $default  reduce using rule 20 (stage)


state 131

   21 stage: PIXEL ident block .

    $default  reduce using rule 21 (stage)


state 132

   22 routine: ROUTINE ident block .

    $default  reduce using rule 22 (routine)


state 133

   19 gpu_program: PROGRAM ident block .

    $default  reduce using rule 19 (gpu_program)


state 134

   18 my_string: STRING .

    $default  reduce using rule 18 (my_string)


state 135

   16 native: GLSL OPEN_CBRACE my_string . CLOSE_CBRACE

    CLOSE_CBRACE  shift, and go to state 157


state 136

   17 native: HLSL OPEN_CBRACE my_string . CLOSE_CBRACE

    CLOSE_CBRACE  shift, and go to state 158


state 137

   63 expr: expr . binary_op expr
   63     | expr binary_op expr .
   69 unary_expr: expr . INC
   70           | expr . DEC

    PLUS           shift, and go to state 89
    MINUS          shift, and go to state 90
    MULTIPLY       shift, and go to state 91
    DEVIDE         shift, and go to state 92
    INC            shift, and go to state 93
    DEC            shift, and go to state 94
    PLUS_EQL       shift, and go to state 95
    MINUS_EQL      shift, and go to state 96
    MULTIPLY_EQL   shift, and go to state 97
    DEVIDE_EQL     shift, and go to state 98
    GREATER        shift, and go to state 99
    LESS           shift, and go to state 100
    EQL_Q          shift, and go to state 101
    NEQL_Q         shift, and go to state 102
    GREATER_EQUAL  shift, and go to state 103
    LESS_EQUAL     shift, and go to state 104
    AND            shift, and go to state 105
    OR             shift, and go to state 106
    AND_Q          shift, and go to state 107
    OR_Q           shift, and go to state 108
    DOT            shift, and go to state 109
    ARROW          shift, and go to state 110

    PLUS           [reduce using rule 63 (expr)]
    MINUS          [reduce using rule 63 (expr)]
    MULTIPLY       [reduce using rule 63 (expr)]
    DEVIDE         [reduce using rule 63 (expr)]
    INC            [reduce using rule 63 (expr)]
    DEC            [reduce using rule 63 (expr)]
    PLUS_EQL       [reduce using rule 63 (expr)]
    MINUS_EQL      [reduce using rule 63 (expr)]
    MULTIPLY_EQL   [reduce using rule 63 (expr)]
    DEVIDE_EQL     [reduce using rule 63 (expr)]
    GREATER        [reduce using rule 63 (expr)]
    LESS           [reduce using rule 63 (expr)]
    EQL_Q          [reduce using rule 63 (expr)]
    NEQL_Q         [reduce using rule 63 (expr)]
    GREATER_EQUAL  [reduce using rule 63 (expr)]
    LESS_EQUAL     [reduce using rule 63 (expr)]
    AND            [reduce using rule 63 (expr)]
    OR             [reduce using rule 63 (expr)]
    AND_Q          [reduce using rule 63 (expr)]
    OR_Q           [reduce using rule 63 (expr)]
    DOT            [reduce using rule 63 (expr)]
    ARROW          [reduce using rule 63 (expr)]
    $default       reduce using rule 63 (expr)

    binary_op  go to state 111


state 138

   63 expr: expr . binary_op expr
   69 unary_expr: expr . INC
   70           | expr . DEC
  108 call_args: expr .

    PLUS           shift, and go to state 89
    MINUS          shift, and go to state 90
    MULTIPLY       shift, and go to state 91
    DEVIDE         shift, and go to state 92
    INC            shift, and go to state 93
    DEC            shift, and go to state 94
    PLUS_EQL       shift, and go to state 95
    MINUS_EQL      shift, and go to state 96
    MULTIPLY_EQL   shift, and go to state 97
    DEVIDE_EQL     shift, and go to state 98
    GREATER        shift, and go to state 99
    LESS           shift, and go to state 100
    EQL_Q          shift, and go to state 101
    NEQL_Q         shift, and go to state 102
    GREATER_EQUAL  shift, and go to state 103
    LESS_EQUAL     shift, and go to state 104
    AND            shift, and go to state 105
    OR             shift, and go to state 106
    AND_Q          shift, and go to state 107
    OR_Q           shift, and go to state 108
    DOT            shift, and go to state 109
    ARROW          shift, and go to state 110

    $default  reduce using rule 108 (call_args)

    binary_op  go to state 111


state 139

   72 func_call: ident OPEN_BRACE call_args . CLOSE_BRACE
  109 call_args: call_args . COMMA expr

    CLOSE_BRACE  shift, and go to state 159
    COMMA        shift, and go to state 160


state 140

   30 arr_call: ident OPEN_SQBRACE expr . CLOSE_SQBRACE
   63 expr: expr . binary_op expr
   69 unary_expr: expr . INC
   70           | expr . DEC

    PLUS           shift, and go to state 89
    MINUS          shift, and go to state 90
    MULTIPLY       shift, and go to state 91
    DEVIDE         shift, and go to state 92
    INC            shift, and go to state 93
    DEC            shift, and go to state 94
    PLUS_EQL       shift, and go to state 95
    MINUS_EQL      shift, and go to state 96
    MULTIPLY_EQL   shift, and go to state 97
    DEVIDE_EQL     shift, and go to state 98
    GREATER        shift, and go to state 99
    LESS           shift, and go to state 100
    EQL_Q          shift, and go to state 101
    NEQL_Q         shift, and go to state 102
    GREATER_EQUAL  shift, and go to state 103
    LESS_EQUAL     shift, and go to state 104
    AND            shift, and go to state 105
    OR             shift, and go to state 106
    AND_Q          shift, and go to state 107
    OR_Q           shift, and go to state 108
    CLOSE_SQBRACE  shift, and go to state 161
    DOT            shift, and go to state 109
    ARROW          shift, and go to state 110

    binary_op  go to state 111


state 141

   63 expr: expr . binary_op expr
   69 unary_expr: expr . INC
   70           | expr . DEC
  106 assignment: ident_all EQL expr .

    PLUS           shift, and go to state 89
    MINUS          shift, and go to state 90
    MULTIPLY       shift, and go to state 91
    DEVIDE         shift, and go to state 92
    INC            shift, and go to state 93
    DEC            shift, and go to state 94
    PLUS_EQL       shift, and go to state 95
    MINUS_EQL      shift, and go to state 96
    MULTIPLY_EQL   shift, and go to state 97
    DEVIDE_EQL     shift, and go to state 98
    GREATER        shift, and go to state 99
    LESS           shift, and go to state 100
    EQL_Q          shift, and go to state 101
    NEQL_Q         shift, and go to state 102
    GREATER_EQUAL  shift, and go to state 103
    LESS_EQUAL     shift, and go to state 104
    AND            shift, and go to state 105
    OR             shift, and go to state 106
    AND_Q          shift, and go to state 107
    OR_Q           shift, and go to state 108
    DOT            shift, and go to state 109
    ARROW          shift, and go to state 110

    PLUS           [reduce using rule 106 (assignment)]
    MINUS          [reduce using rule 106 (assignment)]
    MULTIPLY       [reduce using rule 106 (assignment)]
    DEVIDE         [reduce using rule 106 (assignment)]
    INC            [reduce using rule 106 (assignment)]
    DEC            [reduce using rule 106 (assignment)]
    PLUS_EQL       [reduce using rule 106 (assignment)]
    MINUS_EQL      [reduce using rule 106 (assignment)]
    MULTIPLY_EQL   [reduce using rule 106 (assignment)]
    DEVIDE_EQL     [reduce using rule 106 (assignment)]
    GREATER        [reduce using rule 106 (assignment)]
    LESS           [reduce using rule 106 (assignment)]
    EQL_Q          [reduce using rule 106 (assignment)]
    NEQL_Q         [reduce using rule 106 (assignment)]
    GREATER_EQUAL  [reduce using rule 106 (assignment)]
    LESS_EQUAL     [reduce using rule 106 (assignment)]
    AND            [reduce using rule 106 (assignment)]
    OR             [reduce using rule 106 (assignment)]
    AND_Q          [reduce using rule 106 (assignment)]
    OR_Q           [reduce using rule 106 (assignment)]
    DOT            [reduce using rule 106 (assignment)]
    ARROW          [reduce using rule 106 (assignment)]
    $default       reduce using rule 106 (assignment)

    binary_op  go to state 111


state 142

   73 func_call: type OPEN_BRACE call_args . CLOSE_BRACE
  109 call_args: call_args . COMMA expr

    CLOSE_BRACE  shift, and go to state 162
    COMMA        shift, and go to state 160


state 143

   49 func_dcl: type ident OPEN_BRACE . func_dcl_args CLOSE_BRACE block

    ID    shift, and go to state 152
    TYPE  shift, and go to state 2

    $default  reduce using rule 113 (func_dcl_args)

    type           go to state 163
    func_dcl_args  go to state 164
    var_dcl        go to state 165


state 144

  117 var_dcl: type ident EQL . expr

    ID          shift, and go to state 1
    TYPE        shift, and go to state 2
    FLOAT       shift, and go to state 4
    INT         shift, and go to state 5
    BOOLCONST   shift, and go to state 6
    OPEN_BRACE  shift, and go to state 7
    PLUS        shift, and go to state 9
    MINUS       shift, and go to state 10
    MULTIPLY    shift, and go to state 11
    NOT         shift, and go to state 12
    INC         shift, and go to state 13
    DEC         shift, and go to state 14
    AND         shift, and go to state 17

    arr_call    go to state 35
    numeric     go to state 44
    numFloat    go to state 45
    numInteger  go to state 46
    expr        go to state 166
    unary_expr  go to state 48
    const_expr  go to state 49
    func_call   go to state 50
    ident       go to state 52
    ident_all   go to state 53
    type        go to state 61
    unary_op    go to state 55
    assignment  go to state 56


state 145

   28 arr_dcl: type ident OPEN_SQBRACE . numInteger CLOSE_SQBRACE
   29        | type ident OPEN_SQBRACE . numInteger CLOSE_SQBRACE EQL OPEN_CBRACE init_list CLOSE_CBRACE

    INT    shift, and go to state 5
    PLUS   shift, and go to state 167
    MINUS  shift, and go to state 168

    numInteger  go to state 169


state 146

  119 multi_var_dcl: multi_var_dcl COMMA ident .
  120              | multi_var_dcl COMMA ident . EQL expr

    EQL  shift, and go to state 170

    $default  reduce using rule 119 (multi_var_dcl)


state 147

   33 if_stmt: IF OPEN_BRACE expr CLOSE_BRACE . block ELSE block
   34        | IF OPEN_BRACE expr CLOSE_BRACE . block ELSE stmt
   35        | IF OPEN_BRACE expr CLOSE_BRACE . stmt ELSE stmt
   36        | IF OPEN_BRACE expr CLOSE_BRACE . stmt ELSE block
   37        | IF OPEN_BRACE expr CLOSE_BRACE . stmt
   38        | IF OPEN_BRACE expr CLOSE_BRACE . block

    ID           shift, and go to state 1
    TYPE         shift, and go to state 2
    RETURN       shift, and go to state 3
    FLOAT        shift, and go to state 4
    INT          shift, and go to state 5
    BOOLCONST    shift, and go to state 6
    OPEN_BRACE   shift, and go to state 7
    OPEN_CBRACE  shift, and go to state 126
    IF           shift, and go to state 8
    PLUS         shift, and go to state 9
    MINUS        shift, and go to state 10
    MULTIPLY     shift, and go to state 11
    NOT          shift, and go to state 12
    INC          shift, and go to state 13
    DEC          shift, and go to state 14
    WHILE        shift, and go to state 15
    FOR          shift, and go to state 16
    AND          shift, and go to state 17
    STRUCT       shift, and go to state 18
    IOBUFFER     shift, and go to state 19
    VERTEX       shift, and go to state 20
    PIXEL        shift, and go to state 21
    ROUTINE      shift, and go to state 22
    PROGRAM      shift, and go to state 23
    GLSL         shift, and go to state 24
    HLSL         shift, and go to state 25

    stmt            go to state 171
    native          go to state 28
    gpu_program     go to state 29
    stage           go to state 30
    routine         go to state 31
    iobuffer        go to state 32
    selection_stmt  go to state 33
    arr_dcl         go to state 34
    arr_call        go to state 35
    loop_stmt       go to state 36
    if_stmt         go to state 37
    for_stmt        go to state 38
    while_stmt      go to state 39
    strct           go to state 41
    expr_stmt       go to state 42
    func_dcl        go to state 43
    block           go to state 172
    numeric         go to state 44
    numFloat        go to state 45
    numInteger      go to state 46
    expr            go to state 47
    unary_expr      go to state 48
    const_expr      go to state 49
    func_call       go to state 50
    jump_stmt       go to state 51
    ident           go to state 52
    ident_all       go to state 53
    type            go to state 54
    unary_op        go to state 55
    assignment      go to state 56
    var_dcl         go to state 57
    multi_var_dcl   go to state 58


state 148

   41 while_stmt: WHILE OPEN_BRACE expr CLOSE_BRACE . block
   42           | WHILE OPEN_BRACE expr CLOSE_BRACE . stmt

    ID           shift, and go to state 1
    TYPE         shift, and go to state 2
    RETURN       shift, and go to state 3
    FLOAT        shift, and go to state 4
    INT          shift, and go to state 5
    BOOLCONST    shift, and go to state 6
    OPEN_BRACE   shift, and go to state 7
    OPEN_CBRACE  shift, and go to state 126
    IF           shift, and go to state 8
    PLUS         shift, and go to state 9
    MINUS        shift, and go to state 10
    MULTIPLY     shift, and go to state 11
    NOT          shift, and go to state 12
    INC          shift, and go to state 13
    DEC          shift, and go to state 14
    WHILE        shift, and go to state 15
    FOR          shift, and go to state 16
    AND          shift, and go to state 17
    STRUCT       shift, and go to state 18
    IOBUFFER     shift, and go to state 19
    VERTEX       shift, and go to state 20
    PIXEL        shift, and go to state 21
    ROUTINE      shift, and go to state 22
    PROGRAM      shift, and go to state 23
    GLSL         shift, and go to state 24
    HLSL         shift, and go to state 25

    stmt            go to state 173
    native          go to state 28
    gpu_program     go to state 29
    stage           go to state 30
    routine         go to state 31
    iobuffer        go to state 32
    selection_stmt  go to state 33
    arr_dcl         go to state 34
    arr_call        go to state 35
    loop_stmt       go to state 36
    if_stmt         go to state 37
    for_stmt        go to state 38
    while_stmt      go to state 39
    strct           go to state 41
    expr_stmt       go to state 42
    func_dcl        go to state 43
    block           go to state 174
    numeric         go to state 44
    numFloat        go to state 45
    numInteger      go to state 46
    expr            go to state 47
    unary_expr      go to state 48
    const_expr      go to state 49
    func_call       go to state 50
    jump_stmt       go to state 51
    ident           go to state 52
    ident_all       go to state 53
    type            go to state 54
    unary_op        go to state 55
    assignment      go to state 56
    var_dcl         go to state 57
    multi_var_dcl   go to state 58


state 149

   39 for_stmt: FOR OPEN_BRACE stmt stmt . expr CLOSE_BRACE block
   40         | FOR OPEN_BRACE stmt stmt . expr CLOSE_BRACE stmt

    ID          shift, and go to state 1
    TYPE        shift, and go to state 2
    FLOAT       shift, and go to state 4
    INT         shift, and go to state 5
    BOOLCONST   shift, and go to state 6
    OPEN_BRACE  shift, and go to state 7
    PLUS        shift, and go to state 9
    MINUS       shift, and go to state 10
    MULTIPLY    shift, and go to state 11
    NOT         shift, and go to state 12
    INC         shift, and go to state 13
    DEC         shift, and go to state 14
    AND         shift, and go to state 17

    arr_call    go to state 35
    numeric     go to state 44
    numFloat    go to state 45
    numInteger  go to state 46
    expr        go to state 175
    unary_expr  go to state 48
    const_expr  go to state 49
    func_call   go to state 50
    ident       go to state 52
    ident_all   go to state 53
    type        go to state 61
    unary_op    go to state 55
    assignment  go to state 56


state 150

   51 block: OPEN_CBRACE CLOSE_CBRACE .

    $default  reduce using rule 51 (block)


state 151

   44 stmts: stmts . stmt
   50 block: OPEN_CBRACE stmts . CLOSE_CBRACE

    ID            shift, and go to state 1
    TYPE          shift, and go to state 2
    RETURN        shift, and go to state 3
    FLOAT         shift, and go to state 4
    INT           shift, and go to state 5
    BOOLCONST     shift, and go to state 6
    OPEN_BRACE    shift, and go to state 7
    CLOSE_CBRACE  shift, and go to state 176
    IF            shift, and go to state 8
    PLUS          shift, and go to state 9
    MINUS         shift, and go to state 10
    MULTIPLY      shift, and go to state 11
    NOT           shift, and go to state 12
    INC           shift, and go to state 13
    DEC           shift, and go to state 14
    WHILE         shift, and go to state 15
    FOR           shift, and go to state 16
    AND           shift, and go to state 17
    STRUCT        shift, and go to state 18
    IOBUFFER      shift, and go to state 19
    VERTEX        shift, and go to state 20
    PIXEL         shift, and go to state 21
    ROUTINE       shift, and go to state 22
    PROGRAM       shift, and go to state 23
    GLSL          shift, and go to state 24
    HLSL          shift, and go to state 25

    stmt            go to state 86
    native          go to state 28
    gpu_program     go to state 29
    stage           go to state 30
    routine         go to state 31
    iobuffer        go to state 32
    selection_stmt  go to state 33
    arr_dcl         go to state 34
    arr_call        go to state 35
    loop_stmt       go to state 36
    if_stmt         go to state 37
    for_stmt        go to state 38
    while_stmt      go to state 39
    strct           go to state 41
    expr_stmt       go to state 42
    func_dcl        go to state 43
    numeric         go to state 44
    numFloat        go to state 45
    numInteger      go to state 46
    expr            go to state 47
    unary_expr      go to state 48
    const_expr      go to state 49
    func_call       go to state 50
    jump_stmt       go to state 51
    ident           go to state 52
    ident_all       go to state 53
    type            go to state 54
    unary_op        go to state 55
    assignment      go to state 56
    var_dcl         go to state 57
    multi_var_dcl   go to state 58


state 152

   80 type: ID .

    $default  reduce using rule 80 (type)


state 153

   25 ioblock: OPEN_CBRACE CLOSE_CBRACE .

    $default  reduce using rule 25 (ioblock)


state 154

   45 iostmts: semantic_var_dcl . SEMICOLON

    SEMICOLON  shift, and go to state 177


state 155

   24 ioblock: OPEN_CBRACE iostmts . CLOSE_CBRACE
   46 iostmts: iostmts . semantic_var_dcl SEMICOLON

    ID            shift, and go to state 152
    TYPE          shift, and go to state 2
    CLOSE_CBRACE  shift, and go to state 178

    semantic_var_dcl  go to state 179
    type              go to state 156


state 156

   26 semantic_var_dcl: type . ident COLON ident

    ID  shift, and go to state 70

    ident  go to state 180


state 157

   16 native: GLSL OPEN_CBRACE my_string CLOSE_CBRACE .

    $default  reduce using rule 16 (native)


state 158

   17 native: HLSL OPEN_CBRACE my_string CLOSE_CBRACE .

    $default  reduce using rule 17 (native)


state 159

   72 func_call: ident OPEN_BRACE call_args CLOSE_BRACE .

    $default  reduce using rule 72 (func_call)


state 160

  109 call_args: call_args COMMA . expr

    ID          shift, and go to state 1
    TYPE        shift, and go to state 2
    FLOAT       shift, and go to state 4
    INT         shift, and go to state 5
    BOOLCONST   shift, and go to state 6
    OPEN_BRACE  shift, and go to state 7
    PLUS        shift, and go to state 9
    MINUS       shift, and go to state 10
    MULTIPLY    shift, and go to state 11
    NOT         shift, and go to state 12
    INC         shift, and go to state 13
    DEC         shift, and go to state 14
    AND         shift, and go to state 17

    arr_call    go to state 35
    numeric     go to state 44
    numFloat    go to state 45
    numInteger  go to state 46
    expr        go to state 181
    unary_expr  go to state 48
    const_expr  go to state 49
    func_call   go to state 50
    ident       go to state 52
    ident_all   go to state 53
    type        go to state 61
    unary_op    go to state 55
    assignment  go to state 56


state 161

   30 arr_call: ident OPEN_SQBRACE expr CLOSE_SQBRACE .

    $default  reduce using rule 30 (arr_call)


state 162

   73 func_call: type OPEN_BRACE call_args CLOSE_BRACE .

    $default  reduce using rule 73 (func_call)


state 163

  116 var_dcl: type . ident
  117        | type . ident EQL expr

    ID  shift, and go to state 70

    ident  go to state 182


state 164

   49 func_dcl: type ident OPEN_BRACE func_dcl_args . CLOSE_BRACE block
  115 func_dcl_args: func_dcl_args . COMMA var_dcl

    CLOSE_BRACE  shift, and go to state 183
    COMMA        shift, and go to state 184


state 165

  114 func_dcl_args: var_dcl .

    $default  reduce using rule 114 (func_dcl_args)


state 166

   63 expr: expr . binary_op expr
   69 unary_expr: expr . INC
   70           | expr . DEC
  117 var_dcl: type ident EQL expr .

    PLUS           shift, and go to state 89
    MINUS          shift, and go to state 90
    MULTIPLY       shift, and go to state 91
    DEVIDE         shift, and go to state 92
    INC            shift, and go to state 93
    DEC            shift, and go to state 94
    PLUS_EQL       shift, and go to state 95
    MINUS_EQL      shift, and go to state 96
    MULTIPLY_EQL   shift, and go to state 97
    DEVIDE_EQL     shift, and go to state 98
    GREATER        shift, and go to state 99
    LESS           shift, and go to state 100
    EQL_Q          shift, and go to state 101
    NEQL_Q         shift, and go to state 102
    GREATER_EQUAL  shift, and go to state 103
    LESS_EQUAL     shift, and go to state 104
    AND            shift, and go to state 105
    OR             shift, and go to state 106
    AND_Q          shift, and go to state 107
    OR_Q           shift, and go to state 108
    DOT            shift, and go to state 109
    ARROW          shift, and go to state 110

    $default  reduce using rule 117 (var_dcl)

    binary_op  go to state 111


state 167

   59 numInteger: PLUS . INT

    INT  shift, and go to state 65


state 168

   58 numInteger: MINUS . INT

    INT  shift, and go to state 67


state 169

   28 arr_dcl: type ident OPEN_SQBRACE numInteger . CLOSE_SQBRACE
   29        | type ident OPEN_SQBRACE numInteger . CLOSE_SQBRACE EQL OPEN_CBRACE init_list CLOSE_CBRACE

    CLOSE_SQBRACE  shift, and go to state 185


state 170

  120 multi_var_dcl: multi_var_dcl COMMA ident EQL . expr

    ID          shift, and go to state 1
    TYPE        shift, and go to state 2
    FLOAT       shift, and go to state 4
    INT         shift, and go to state 5
    BOOLCONST   shift, and go to state 6
    OPEN_BRACE  shift, and go to state 7
    PLUS        shift, and go to state 9
    MINUS       shift, and go to state 10
    MULTIPLY    shift, and go to state 11
    NOT         shift, and go to state 12
    INC         shift, and go to state 13
    DEC         shift, and go to state 14
    AND         shift, and go to state 17

    arr_call    go to state 35
    numeric     go to state 44
    numFloat    go to state 45
    numInteger  go to state 46
    expr        go to state 186
    unary_expr  go to state 48
    const_expr  go to state 49
    func_call   go to state 50
    ident       go to state 52
    ident_all   go to state 53
    type        go to state 61
    unary_op    go to state 55
    assignment  go to state 56


state 171

   35 if_stmt: IF OPEN_BRACE expr CLOSE_BRACE stmt . ELSE stmt
   36        | IF OPEN_BRACE expr CLOSE_BRACE stmt . ELSE block
   37        | IF OPEN_BRACE expr CLOSE_BRACE stmt .

    ELSE  shift, and go to state 187

    ELSE      [reduce using rule 37 (if_stmt)]
    $default  reduce using rule 37 (if_stmt)


state 172

   33 if_stmt: IF OPEN_BRACE expr CLOSE_BRACE block . ELSE block
   34        | IF OPEN_BRACE expr CLOSE_BRACE block . ELSE stmt
   38        | IF OPEN_BRACE expr CLOSE_BRACE block .

    ELSE  shift, and go to state 188

    ELSE      [reduce using rule 38 (if_stmt)]
    $default  reduce using rule 38 (if_stmt)


state 173

   42 while_stmt: WHILE OPEN_BRACE expr CLOSE_BRACE stmt .

    $default  reduce using rule 42 (while_stmt)


state 174

   41 while_stmt: WHILE OPEN_BRACE expr CLOSE_BRACE block .

    $default  reduce using rule 41 (while_stmt)


state 175

   39 for_stmt: FOR OPEN_BRACE stmt stmt expr . CLOSE_BRACE block
   40         | FOR OPEN_BRACE stmt stmt expr . CLOSE_BRACE stmt
   63 expr: expr . binary_op expr
   69 unary_expr: expr . INC
   70           | expr . DEC

    CLOSE_BRACE    shift, and go to state 189
    PLUS           shift, and go to state 89
    MINUS          shift, and go to state 90
    MULTIPLY       shift, and go to state 91
    DEVIDE         shift, and go to state 92
    INC            shift, and go to state 93
    DEC            shift, and go to state 94
    PLUS_EQL       shift, and go to state 95
    MINUS_EQL      shift, and go to state 96
    MULTIPLY_EQL   shift, and go to state 97
    DEVIDE_EQL     shift, and go to state 98
    GREATER        shift, and go to state 99
    LESS           shift, and go to state 100
    EQL_Q          shift, and go to state 101
    NEQL_Q         shift, and go to state 102
    GREATER_EQUAL  shift, and go to state 103
    LESS_EQUAL     shift, and go to state 104
    AND            shift, and go to state 105
    OR             shift, and go to state 106
    AND_Q          shift, and go to state 107
    OR_Q           shift, and go to state 108
    DOT            shift, and go to state 109
    ARROW          shift, and go to state 110

    binary_op  go to state 111


state 176

   50 block: OPEN_CBRACE stmts CLOSE_CBRACE .

    $default  reduce using rule 50 (block)


state 177

   45 iostmts: semantic_var_dcl SEMICOLON .

    $default  reduce using rule 45 (iostmts)


state 178

   24 ioblock: OPEN_CBRACE iostmts CLOSE_CBRACE .

    $default  reduce using rule 24 (ioblock)


state 179

   46 iostmts: iostmts semantic_var_dcl . SEMICOLON

    SEMICOLON  shift, and go to state 190


state 180

   26 semantic_var_dcl: type ident . COLON ident

    COLON  shift, and go to state 191


state 181

   63 expr: expr . binary_op expr
   69 unary_expr: expr . INC
   70           | expr . DEC
  109 call_args: call_args COMMA expr .

    PLUS           shift, and go to state 89
    MINUS          shift, and go to state 90
    MULTIPLY       shift, and go to state 91
    DEVIDE         shift, and go to state 92
    INC            shift, and go to state 93
    DEC            shift, and go to state 94
    PLUS_EQL       shift, and go to state 95
    MINUS_EQL      shift, and go to state 96
    MULTIPLY_EQL   shift, and go to state 97
    DEVIDE_EQL     shift, and go to state 98
    GREATER        shift, and go to state 99
    LESS           shift, and go to state 100
    EQL_Q          shift, and go to state 101
    NEQL_Q         shift, and go to state 102
    GREATER_EQUAL  shift, and go to state 103
    LESS_EQUAL     shift, and go to state 104
    AND            shift, and go to state 105
    OR             shift, and go to state 106
    AND_Q          shift, and go to state 107
    OR_Q           shift, and go to state 108
    DOT            shift, and go to state 109
    ARROW          shift, and go to state 110

    $default  reduce using rule 109 (call_args)

    binary_op  go to state 111


state 182

  116 var_dcl: type ident .
  117        | type ident . EQL expr

    EQL  shift, and go to state 144

    $default  reduce using rule 116 (var_dcl)


state 183

   49 func_dcl: type ident OPEN_BRACE func_dcl_args CLOSE_BRACE . block

    OPEN_CBRACE  shift, and go to state 126

    block  go to state 192


state 184

  115 func_dcl_args: func_dcl_args COMMA . var_dcl

    ID    shift, and go to state 152
    TYPE  shift, and go to state 2

    type     go to state 163
    var_dcl  go to state 193


state 185

   28 arr_dcl: type ident OPEN_SQBRACE numInteger CLOSE_SQBRACE .
   29        | type ident OPEN_SQBRACE numInteger CLOSE_SQBRACE . EQL OPEN_CBRACE init_list CLOSE_CBRACE

    EQL  shift, and go to state 194

    $default  reduce using rule 28 (arr_dcl)


state 186

   63 expr: expr . binary_op expr
   69 unary_expr: expr . INC
   70           | expr . DEC
  120 multi_var_dcl: multi_var_dcl COMMA ident EQL expr .

    PLUS           shift, and go to state 89
    MINUS          shift, and go to state 90
    MULTIPLY       shift, and go to state 91
    DEVIDE         shift, and go to state 92
    INC            shift, and go to state 93
    DEC            shift, and go to state 94
    PLUS_EQL       shift, and go to state 95
    MINUS_EQL      shift, and go to state 96
    MULTIPLY_EQL   shift, and go to state 97
    DEVIDE_EQL     shift, and go to state 98
    GREATER        shift, and go to state 99
    LESS           shift, and go to state 100
    EQL_Q          shift, and go to state 101
    NEQL_Q         shift, and go to state 102
    GREATER_EQUAL  shift, and go to state 103
    LESS_EQUAL     shift, and go to state 104
    AND            shift, and go to state 105
    OR             shift, and go to state 106
    AND_Q          shift, and go to state 107
    OR_Q           shift, and go to state 108
    DOT            shift, and go to state 109
    ARROW          shift, and go to state 110

    $default  reduce using rule 120 (multi_var_dcl)

    binary_op  go to state 111


state 187

   35 if_stmt: IF OPEN_BRACE expr CLOSE_BRACE stmt ELSE . stmt
   36        | IF OPEN_BRACE expr CLOSE_BRACE stmt ELSE . block

    ID           shift, and go to state 1
    TYPE         shift, and go to state 2
    RETURN       shift, and go to state 3
    FLOAT        shift, and go to state 4
    INT          shift, and go to state 5
    BOOLCONST    shift, and go to state 6
    OPEN_BRACE   shift, and go to state 7
    OPEN_CBRACE  shift, and go to state 126
    IF           shift, and go to state 8
    PLUS         shift, and go to state 9
    MINUS        shift, and go to state 10
    MULTIPLY     shift, and go to state 11
    NOT          shift, and go to state 12
    INC          shift, and go to state 13
    DEC          shift, and go to state 14
    WHILE        shift, and go to state 15
    FOR          shift, and go to state 16
    AND          shift, and go to state 17
    STRUCT       shift, and go to state 18
    IOBUFFER     shift, and go to state 19
    VERTEX       shift, and go to state 20
    PIXEL        shift, and go to state 21
    ROUTINE      shift, and go to state 22
    PROGRAM      shift, and go to state 23
    GLSL         shift, and go to state 24
    HLSL         shift, and go to state 25

    stmt            go to state 195
    native          go to state 28
    gpu_program     go to state 29
    stage           go to state 30
    routine         go to state 31
    iobuffer        go to state 32
    selection_stmt  go to state 33
    arr_dcl         go to state 34
    arr_call        go to state 35
    loop_stmt       go to state 36
    if_stmt         go to state 37
    for_stmt        go to state 38
    while_stmt      go to state 39
    strct           go to state 41
    expr_stmt       go to state 42
    func_dcl        go to state 43
    block           go to state 196
    numeric         go to state 44
    numFloat        go to state 45
    numInteger      go to state 46
    expr            go to state 47
    unary_expr      go to state 48
    const_expr      go to state 49
    func_call       go to state 50
    jump_stmt       go to state 51
    ident           go to state 52
    ident_all       go to state 53
    type            go to state 54
    unary_op        go to state 55
    assignment      go to state 56
    var_dcl         go to state 57
    multi_var_dcl   go to state 58


state 188

   33 if_stmt: IF OPEN_BRACE expr CLOSE_BRACE block ELSE . block
   34        | IF OPEN_BRACE expr CLOSE_BRACE block ELSE . stmt

    ID           shift, and go to state 1
    TYPE         shift, and go to state 2
    RETURN       shift, and go to state 3
    FLOAT        shift, and go to state 4
    INT          shift, and go to state 5
    BOOLCONST    shift, and go to state 6
    OPEN_BRACE   shift, and go to state 7
    OPEN_CBRACE  shift, and go to state 126
    IF           shift, and go to state 8
    PLUS         shift, and go to state 9
    MINUS        shift, and go to state 10
    MULTIPLY     shift, and go to state 11
    NOT          shift, and go to state 12
    INC          shift, and go to state 13
    DEC          shift, and go to state 14
    WHILE        shift, and go to state 15
    FOR          shift, and go to state 16
    AND          shift, and go to state 17
    STRUCT       shift, and go to state 18
    IOBUFFER     shift, and go to state 19
    VERTEX       shift, and go to state 20
    PIXEL        shift, and go to state 21
    ROUTINE      shift, and go to state 22
    PROGRAM      shift, and go to state 23
    GLSL         shift, and go to state 24
    HLSL         shift, and go to state 25

    stmt            go to state 197
    native          go to state 28
    gpu_program     go to state 29
    stage           go to state 30
    routine         go to state 31
    iobuffer        go to state 32
    selection_stmt  go to state 33
    arr_dcl         go to state 34
    arr_call        go to state 35
    loop_stmt       go to state 36
    if_stmt         go to state 37
    for_stmt        go to state 38
    while_stmt      go to state 39
    strct           go to state 41
    expr_stmt       go to state 42
    func_dcl        go to state 43
    block           go to state 198
    numeric         go to state 44
    numFloat        go to state 45
    numInteger      go to state 46
    expr            go to state 47
    unary_expr      go to state 48
    const_expr      go to state 49
    func_call       go to state 50
    jump_stmt       go to state 51
    ident           go to state 52
    ident_all       go to state 53
    type            go to state 54
    unary_op        go to state 55
    assignment      go to state 56
    var_dcl         go to state 57
    multi_var_dcl   go to state 58


state 189

   39 for_stmt: FOR OPEN_BRACE stmt stmt expr CLOSE_BRACE . block
   40         | FOR OPEN_BRACE stmt stmt expr CLOSE_BRACE . stmt

    ID           shift, and go to state 1
    TYPE         shift, and go to state 2
    RETURN       shift, and go to state 3
    FLOAT        shift, and go to state 4
    INT          shift, and go to state 5
    BOOLCONST    shift, and go to state 6
    OPEN_BRACE   shift, and go to state 7
    OPEN_CBRACE  shift, and go to state 126
    IF           shift, and go to state 8
    PLUS         shift, and go to state 9
    MINUS        shift, and go to state 10
    MULTIPLY     shift, and go to state 11
    NOT          shift, and go to state 12
    INC          shift, and go to state 13
    DEC          shift, and go to state 14
    WHILE        shift, and go to state 15
    FOR          shift, and go to state 16
    AND          shift, and go to state 17
    STRUCT       shift, and go to state 18
    IOBUFFER     shift, and go to state 19
    VERTEX       shift, and go to state 20
    PIXEL        shift, and go to state 21
    ROUTINE      shift, and go to state 22
    PROGRAM      shift, and go to state 23
    GLSL         shift, and go to state 24
    HLSL         shift, and go to state 25

    stmt            go to state 199
    native          go to state 28
    gpu_program     go to state 29
    stage           go to state 30
    routine         go to state 31
    iobuffer        go to state 32
    selection_stmt  go to state 33
    arr_dcl         go to state 34
    arr_call        go to state 35
    loop_stmt       go to state 36
    if_stmt         go to state 37
    for_stmt        go to state 38
    while_stmt      go to state 39
    strct           go to state 41
    expr_stmt       go to state 42
    func_dcl        go to state 43
    block           go to state 200
    numeric         go to state 44
    numFloat        go to state 45
    numInteger      go to state 46
    expr            go to state 47
    unary_expr      go to state 48
    const_expr      go to state 49
    func_call       go to state 50
    jump_stmt       go to state 51
    ident           go to state 52
    ident_all       go to state 53
    type            go to state 54
    unary_op        go to state 55
    assignment      go to state 56
    var_dcl         go to state 57
    multi_var_dcl   go to state 58


state 190

   46 iostmts: iostmts semantic_var_dcl SEMICOLON .

    $default  reduce using rule 46 (iostmts)


state 191

   26 semantic_var_dcl: type ident COLON . ident

    ID  shift, and go to state 70

    ident  go to state 201


state 192

   49 func_dcl: type ident OPEN_BRACE func_dcl_args CLOSE_BRACE block .

    $default  reduce using rule 49 (func_dcl)


state 193

  115 func_dcl_args: func_dcl_args COMMA var_dcl .

    $default  reduce using rule 115 (func_dcl_args)


state 194

   29 arr_dcl: type ident OPEN_SQBRACE numInteger CLOSE_SQBRACE EQL . OPEN_CBRACE init_list CLOSE_CBRACE

    OPEN_CBRACE  shift, and go to state 202


state 195

   35 if_stmt: IF OPEN_BRACE expr CLOSE_BRACE stmt ELSE stmt .

    $default  reduce using rule 35 (if_stmt)


state 196

   36 if_stmt: IF OPEN_BRACE expr CLOSE_BRACE stmt ELSE block .

    $default  reduce using rule 36 (if_stmt)


state 197

   34 if_stmt: IF OPEN_BRACE expr CLOSE_BRACE block ELSE stmt .

    $default  reduce using rule 34 (if_stmt)


state 198

   33 if_stmt: IF OPEN_BRACE expr CLOSE_BRACE block ELSE block .

    $default  reduce using rule 33 (if_stmt)


state 199

   40 for_stmt: FOR OPEN_BRACE stmt stmt expr CLOSE_BRACE stmt .

    $default  reduce using rule 40 (for_stmt)


state 200

   39 for_stmt: FOR OPEN_BRACE stmt stmt expr CLOSE_BRACE block .

    $default  reduce using rule 39 (for_stmt)


state 201

   26 semantic_var_dcl: type ident COLON ident .

    $default  reduce using rule 26 (semantic_var_dcl)


state 202

   29 arr_dcl: type ident OPEN_SQBRACE numInteger CLOSE_SQBRACE EQL OPEN_CBRACE . init_list CLOSE_CBRACE

    ID          shift, and go to state 1
    TYPE        shift, and go to state 2
    FLOAT       shift, and go to state 4
    INT         shift, and go to state 5
    BOOLCONST   shift, and go to state 6
    OPEN_BRACE  shift, and go to state 7
    PLUS        shift, and go to state 9
    MINUS       shift, and go to state 10
    MULTIPLY    shift, and go to state 11
    NOT         shift, and go to state 12
    INC         shift, and go to state 13
    DEC         shift, and go to state 14
    AND         shift, and go to state 17

    $default  reduce using rule 110 (init_list)

    arr_call    go to state 35
    numeric     go to state 44
    numFloat    go to state 45
    numInteger  go to state 46
    expr        go to state 203
    unary_expr  go to state 48
    const_expr  go to state 49
    func_call   go to state 50
    ident       go to state 52
    ident_all   go to state 53
    type        go to state 61
    unary_op    go to state 55
    assignment  go to state 56
    init_list   go to state 204


state 203

   63 expr: expr . binary_op expr
   69 unary_expr: expr . INC
   70           | expr . DEC
  111 init_list: expr .

    PLUS           shift, and go to state 89
    MINUS          shift, and go to state 90
    MULTIPLY       shift, and go to state 91
    DEVIDE         shift, and go to state 92
    INC            shift, and go to state 93
    DEC            shift, and go to state 94
    PLUS_EQL       shift, and go to state 95
    MINUS_EQL      shift, and go to state 96
    MULTIPLY_EQL   shift, and go to state 97
    DEVIDE_EQL     shift, and go to state 98
    GREATER        shift, and go to state 99
    LESS           shift, and go to state 100
    EQL_Q          shift, and go to state 101
    NEQL_Q         shift, and go to state 102
    GREATER_EQUAL  shift, and go to state 103
    LESS_EQUAL     shift, and go to state 104
    AND            shift, and go to state 105
    OR             shift, and go to state 106
    AND_Q          shift, and go to state 107
    OR_Q           shift, and go to state 108
    DOT            shift, and go to state 109
    ARROW          shift, and go to state 110

    $default  reduce using rule 111 (init_list)

    binary_op  go to state 111


state 204

   29 arr_dcl: type ident OPEN_SQBRACE numInteger CLOSE_SQBRACE EQL OPEN_CBRACE init_list . CLOSE_CBRACE
  112 init_list: init_list . COMMA expr

    CLOSE_CBRACE  shift, and go to state 205
    COMMA         shift, and go to state 206


state 205

   29 arr_dcl: type ident OPEN_SQBRACE numInteger CLOSE_SQBRACE EQL OPEN_CBRACE init_list CLOSE_CBRACE .

    $default  reduce using rule 29 (arr_dcl)


state 206

  112 init_list: init_list COMMA . expr

    ID          shift, and go to state 1
    TYPE        shift, and go to state 2
    FLOAT       shift, and go to state 4
    INT         shift, and go to state 5
    BOOLCONST   shift, and go to state 6
    OPEN_BRACE  shift, and go to state 7
    PLUS        shift, and go to state 9
    MINUS       shift, and go to state 10
    MULTIPLY    shift, and go to state 11
    NOT         shift, and go to state 12
    INC         shift, and go to state 13
    DEC         shift, and go to state 14
    AND         shift, and go to state 17

    arr_call    go to state 35
    numeric     go to state 44
    numFloat    go to state 45
    numInteger  go to state 46
    expr        go to state 207
    unary_expr  go to state 48
    const_expr  go to state 49
    func_call   go to state 50
    ident       go to state 52
    ident_all   go to state 53
    type        go to state 61
    unary_op    go to state 55
    assignment  go to state 56


state 207

   63 expr: expr . binary_op expr
   69 unary_expr: expr . INC
   70           | expr . DEC
  112 init_list: init_list COMMA expr .

    PLUS           shift, and go to state 89
    MINUS          shift, and go to state 90
    MULTIPLY       shift, and go to state 91
    DEVIDE         shift, and go to state 92
    INC            shift, and go to state 93
    DEC            shift, and go to state 94
    PLUS_EQL       shift, and go to state 95
    MINUS_EQL      shift, and go to state 96
    MULTIPLY_EQL   shift, and go to state 97
    DEVIDE_EQL     shift, and go to state 98
    GREATER        shift, and go to state 99
    LESS           shift, and go to state 100
    EQL_Q          shift, and go to state 101
    NEQL_Q         shift, and go to state 102
    GREATER_EQUAL  shift, and go to state 103
    LESS_EQUAL     shift, and go to state 104
    AND            shift, and go to state 105
    OR             shift, and go to state 106
    AND_Q          shift, and go to state 107
    OR_Q           shift, and go to state 108
    DOT            shift, and go to state 109
    ARROW          shift, and go to state 110

    $default  reduce using rule 112 (init_list)

    binary_op  go to state 111
