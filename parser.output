Terminals unused in grammar

   STD


State 6 conflicts: 5 shift/reduce
State 27 conflicts: 1 shift/reduce
State 31 conflicts: 4 shift/reduce
State 32 conflicts: 4 shift/reduce
State 143 conflicts: 13 shift/reduce
State 144 conflicts: 13 shift/reduce
State 145 conflicts: 13 shift/reduce
State 146 conflicts: 13 shift/reduce
State 189 conflicts: 13 shift/reduce
State 190 conflicts: 13 shift/reduce
State 191 conflicts: 13 shift/reduce
State 192 conflicts: 13 shift/reduce
State 193 conflicts: 13 shift/reduce
State 194 conflicts: 13 shift/reduce
State 195 conflicts: 13 shift/reduce


Grammar

    0 $accept: start $end

    1 start: program

    2 program: PROGRAM ID OPEN_BRACE program_block CLOSE_BRACE SEMICOLON

    3 struct_node: STRUCT ID struct_block SEMICOLON

    4 routine_node: ROUTINE ID OPEN_BRACE config_block CLOSE_BRACE

    5 config_block: %empty
    6             | BUILTIN_VAR EQL ID SEMICOLON
    7             | config_block BUILTIN_VAR EQL ID SEMICOLON

    8 iobuffer: IOBUFFER ID buffer_block SEMICOLON

    9 vertex: VERTEX ID OPEN_BRACE stage_block CLOSE_BRACE SEMICOLON

   10 pixel: PIXEL ID OPEN_BRACE stage_block CLOSE_BRACE SEMICOLON

   11 type_constructor: TYPE OPEN_PAREN args CLOSE_PAREN

   12 function_dcl: variable_spec ID OPEN_PAREN arg_list CLOSE_PAREN

   13 function_def: function_dcl block

   14 arg_list: %empty
   15         | arg
   16         | arg_list COMMA arg

   17 arg: variable_spec
   18    | variable_spec ID

   19 stage_block: %empty
   20            | stage_stmts
   21            | stage_block stage_stmts

   22 stage_stmts: struct_node
   23            | STRUCT ID SEMICOLON
   24            | function_dcl SEMICOLON
   25            | function_def
   26            | g_var_dcl SEMICOLON
   27            | unifrom_block SEMICOLON
   28            | g_arr_dcl SEMICOLON

   29 unifrom_block: UNIFORM ID struct_block

   30 struct_block: OPEN_BRACE CLOSE_BRACE
   31             | OPEN_BRACE struct_stmts CLOSE_BRACE

   32 struct_stmts: variable_dcl SEMICOLON
   33             | g_arr_dcl SEMICOLON
   34             | struct_stmts variable_dcl SEMICOLON
   35             | struct_stmts g_arr_dcl SEMICOLON

   36 program_block: %empty
   37              | program_stmts
   38              | program_block program_stmts

   39 program_stmts: STRUCT ID SEMICOLON
   40              | IOBUFFER ID SEMICOLON
   41              | iobuffer
   42              | struct_node
   43              | vertex
   44              | routine_node SEMICOLON
   45              | pixel

   46 block: OPEN_BRACE CLOSE_BRACE
   47      | OPEN_BRACE stmts CLOSE_BRACE

   48 stmts: stmt
   49      | stmts stmt

   50 stmt: expr_stmt
   51     | g_var_dcl SEMICOLON
   52     | g_arr_dcl SEMICOLON
   53     | BUILTIN_VAR EQL expression SEMICOLON

   54 expr_stmt: expression SEMICOLON

   55 expression: assignment
   56           | lvalue
   57           | int_num
   58           | float_num
   59           | expression binary_op expression
   60           | unary_expr
   61           | func_call
   62           | type_constructor
   63           | OPEN_PAREN expression CLOSE_PAREN

   64 func_call: access_chain OPEN_PAREN args CLOSE_PAREN

   65 args: %empty
   66     | expression
   67     | args COMMA expression

   68 unary_expr: NOT expression
   69           | INC expression
   70           | DEC expression
   71           | MUL expression
   72           | expression INC
   73           | expression DEC

   74 binary_op: PLUS
   75          | MINUS
   76          | MUL
   77          | DEV
   78          | MOD
   79          | LEQL
   80          | GEQL
   81          | QEQL
   82          | NOT_EQL
   83          | AND
   84          | OR

   85 assignment: lvalue EQL expression
   86           | lvalue PLUS_EQL expression
   87           | lvalue MINUS_EQL expression
   88           | lvalue DEV_EQL expression
   89           | lvalue MUL_EQL expression
   90           | lvalue MOD_EQL expression

   91 lvalue: access_chain

   92 access_chain: ID
   93             | arr_access
   94             | access_chain DOT ID
   95             | access_chain ARROW ID
   96             | access_chain DOT arr_access
   97             | access_chain ARROW arr_access

   98 arr_access: ID OPEN_BRACKET expression CLOSE_BRACKET

   99 buffer_block: OPEN_BRACE CLOSE_BRACE
  100             | OPEN_BRACE buffer_stmts CLOSE_BRACE

  101 buffer_stmts: semantic_variable SEMICOLON
  102             | buffer_stmts semantic_variable SEMICOLON

  103 semantic_variable: variable_spec ID COLON ID

  104 g_var_dcl: variable_spec g_id_list

  105 g_arr_dcl: variable_spec ID OPEN_BRACKET int_num CLOSE_BRACKET

  106 g_id_list: ID
  107          | ID EQL expression
  108          | g_id_list COMMA ID
  109          | g_id_list COMMA ID EQL expression

  110 variable_dcl: variable_spec id_list

  111 id_list: ID
  112        | id_list COMMA ID

  113 variable_spec: TYPE
  114              | ID

  115 int_num: INTEGER

  116 float_num: FLOAT


Terminals, with rules where they appear

$end (0) 0
error (256)
INTEGER (258) 115
ID (259) 2 3 4 6 7 8 9 10 12 18 23 29 39 40 92 94 95 98 103 105 106
    107 108 109 111 112 114
TYPE (260) 11 113
BUILTIN_VAR (261) 6 7 53
FLOAT (262) 116
PROGRAM (263) 2
SEMICOLON (264) 2 3 6 7 8 9 10 23 24 26 27 28 32 33 34 35 39 40 44
    51 52 53 54 101 102
ROUTINE (265) 4
STRUCT (266) 3 23 39
VERTEX (267) 9
PIXEL (268) 10
IOBUFFER (269) 8 40
UNIFORM (270) 29
OPEN_BRACE (271) 2 4 9 10 30 31 46 47 99 100
CLOSE_BRACE (272) 2 4 9 10 30 31 46 47 99 100
COMMA (273) 16 67 108 109 112
COLON (274) 103
OPEN_PAREN (275) 11 12 63 64
CLOSE_PAREN (276) 11 12 63 64
EQL (277) 6 7 53 85 107 109
DOT (278) 94 96
ARROW (279) 95 97
OPEN_BRACKET (280) 98 105
CLOSE_BRACKET (281) 98 105
PLUS_EQL (282) 86
MINUS_EQL (283) 87
MUL_EQL (284) 89
DEV_EQL (285) 88
MOD_EQL (286) 90
PLUS (287) 74
MINUS (288) 75
MUL (289) 71 76
DEV (290) 77
MOD (291) 78
LEQL (292) 79
GEQL (293) 80
QEQL (294) 81
NOT_EQL (295) 82
AND (296) 83
OR (297) 84
NOT (298) 68
INC (299) 69 72
DEC (300) 70 73
STD (301)


Nonterminals, with rules where they appear

$accept (47)
    on left: 0
start (48)
    on left: 1, on right: 0
program (49)
    on left: 2, on right: 1
struct_node (50)
    on left: 3, on right: 22 42
routine_node (51)
    on left: 4, on right: 44
config_block (52)
    on left: 5 6 7, on right: 4 7
iobuffer (53)
    on left: 8, on right: 41
vertex (54)
    on left: 9, on right: 43
pixel (55)
    on left: 10, on right: 45
type_constructor (56)
    on left: 11, on right: 62
function_dcl (57)
    on left: 12, on right: 13 24
function_def (58)
    on left: 13, on right: 25
arg_list (59)
    on left: 14 15 16, on right: 12 16
arg (60)
    on left: 17 18, on right: 15 16
stage_block (61)
    on left: 19 20 21, on right: 9 10 21
stage_stmts (62)
    on left: 22 23 24 25 26 27 28, on right: 20 21
unifrom_block (63)
    on left: 29, on right: 27
struct_block (64)
    on left: 30 31, on right: 3 29
struct_stmts (65)
    on left: 32 33 34 35, on right: 31 34 35
program_block (66)
    on left: 36 37 38, on right: 2 38
program_stmts (67)
    on left: 39 40 41 42 43 44 45, on right: 37 38
block (68)
    on left: 46 47, on right: 13
stmts (69)
    on left: 48 49, on right: 47 49
stmt (70)
    on left: 50 51 52 53, on right: 48 49
expr_stmt (71)
    on left: 54, on right: 50
expression (72)
    on left: 55 56 57 58 59 60 61 62 63, on right: 53 54 59 63 66 67
    68 69 70 71 72 73 85 86 87 88 89 90 98 107 109
func_call (73)
    on left: 64, on right: 61
args (74)
    on left: 65 66 67, on right: 11 64 67
unary_expr (75)
    on left: 68 69 70 71 72 73, on right: 60
binary_op (76)
    on left: 74 75 76 77 78 79 80 81 82 83 84, on right: 59
assignment (77)
    on left: 85 86 87 88 89 90, on right: 55
lvalue (78)
    on left: 91, on right: 56 85 86 87 88 89 90
access_chain (79)
    on left: 92 93 94 95 96 97, on right: 64 91 94 95 96 97
arr_access (80)
    on left: 98, on right: 93 96 97
buffer_block (81)
    on left: 99 100, on right: 8
buffer_stmts (82)
    on left: 101 102, on right: 100 102
semantic_variable (83)
    on left: 103, on right: 101 102
g_var_dcl (84)
    on left: 104, on right: 26 51
g_arr_dcl (85)
    on left: 105, on right: 28 33 35 52
g_id_list (86)
    on left: 106 107 108 109, on right: 104 108 109
variable_dcl (87)
    on left: 110, on right: 32 34
id_list (88)
    on left: 111 112, on right: 110 112
variable_spec (89)
    on left: 113 114, on right: 12 17 18 103 104 105 110
int_num (90)
    on left: 115, on right: 57 105
float_num (91)
    on left: 116, on right: 58


State 0

    0 $accept: . start $end

    PROGRAM  shift, and go to state 1

    start    go to state 2
    program  go to state 3


State 1

    2 program: PROGRAM . ID OPEN_BRACE program_block CLOSE_BRACE SEMICOLON

    ID  shift, and go to state 4


State 2

    0 $accept: start . $end

    $end  shift, and go to state 5


State 3

    1 start: program .

    $default  reduce using rule 1 (start)


State 4

    2 program: PROGRAM ID . OPEN_BRACE program_block CLOSE_BRACE SEMICOLON

    OPEN_BRACE  shift, and go to state 6


State 5

    0 $accept: start $end .

    $default  accept


State 6

    2 program: PROGRAM ID OPEN_BRACE . program_block CLOSE_BRACE SEMICOLON

    ROUTINE   shift, and go to state 7
    STRUCT    shift, and go to state 8
    VERTEX    shift, and go to state 9
    PIXEL     shift, and go to state 10
    IOBUFFER  shift, and go to state 11

    ROUTINE   [reduce using rule 36 (program_block)]
    STRUCT    [reduce using rule 36 (program_block)]
    VERTEX    [reduce using rule 36 (program_block)]
    PIXEL     [reduce using rule 36 (program_block)]
    IOBUFFER  [reduce using rule 36 (program_block)]
    $default  reduce using rule 36 (program_block)

    struct_node    go to state 12
    routine_node   go to state 13
    iobuffer       go to state 14
    vertex         go to state 15
    pixel          go to state 16
    program_block  go to state 17
    program_stmts  go to state 18


State 7

    4 routine_node: ROUTINE . ID OPEN_BRACE config_block CLOSE_BRACE

    ID  shift, and go to state 19


State 8

    3 struct_node: STRUCT . ID struct_block SEMICOLON
   39 program_stmts: STRUCT . ID SEMICOLON

    ID  shift, and go to state 20


State 9

    9 vertex: VERTEX . ID OPEN_BRACE stage_block CLOSE_BRACE SEMICOLON

    ID  shift, and go to state 21


State 10

   10 pixel: PIXEL . ID OPEN_BRACE stage_block CLOSE_BRACE SEMICOLON

    ID  shift, and go to state 22


State 11

    8 iobuffer: IOBUFFER . ID buffer_block SEMICOLON
   40 program_stmts: IOBUFFER . ID SEMICOLON

    ID  shift, and go to state 23


State 12

   42 program_stmts: struct_node .

    $default  reduce using rule 42 (program_stmts)


State 13

   44 program_stmts: routine_node . SEMICOLON

    SEMICOLON  shift, and go to state 24


State 14

   41 program_stmts: iobuffer .

    $default  reduce using rule 41 (program_stmts)


State 15

   43 program_stmts: vertex .

    $default  reduce using rule 43 (program_stmts)


State 16

   45 program_stmts: pixel .

    $default  reduce using rule 45 (program_stmts)


State 17

    2 program: PROGRAM ID OPEN_BRACE program_block . CLOSE_BRACE SEMICOLON
   38 program_block: program_block . program_stmts

    ROUTINE      shift, and go to state 7
    STRUCT       shift, and go to state 8
    VERTEX       shift, and go to state 9
    PIXEL        shift, and go to state 10
    IOBUFFER     shift, and go to state 11
    CLOSE_BRACE  shift, and go to state 25

    struct_node    go to state 12
    routine_node   go to state 13
    iobuffer       go to state 14
    vertex         go to state 15
    pixel          go to state 16
    program_stmts  go to state 26


State 18

   37 program_block: program_stmts .

    $default  reduce using rule 37 (program_block)


State 19

    4 routine_node: ROUTINE ID . OPEN_BRACE config_block CLOSE_BRACE

    OPEN_BRACE  shift, and go to state 27


State 20

    3 struct_node: STRUCT ID . struct_block SEMICOLON
   39 program_stmts: STRUCT ID . SEMICOLON

    SEMICOLON   shift, and go to state 28
    OPEN_BRACE  shift, and go to state 29

    struct_block  go to state 30


State 21

    9 vertex: VERTEX ID . OPEN_BRACE stage_block CLOSE_BRACE SEMICOLON

    OPEN_BRACE  shift, and go to state 31


State 22

   10 pixel: PIXEL ID . OPEN_BRACE stage_block CLOSE_BRACE SEMICOLON

    OPEN_BRACE  shift, and go to state 32


State 23

    8 iobuffer: IOBUFFER ID . buffer_block SEMICOLON
   40 program_stmts: IOBUFFER ID . SEMICOLON

    SEMICOLON   shift, and go to state 33
    OPEN_BRACE  shift, and go to state 34

    buffer_block  go to state 35


State 24

   44 program_stmts: routine_node SEMICOLON .

    $default  reduce using rule 44 (program_stmts)


State 25

    2 program: PROGRAM ID OPEN_BRACE program_block CLOSE_BRACE . SEMICOLON

    SEMICOLON  shift, and go to state 36


State 26

   38 program_block: program_block program_stmts .

    $default  reduce using rule 38 (program_block)


State 27

    4 routine_node: ROUTINE ID OPEN_BRACE . config_block CLOSE_BRACE

    BUILTIN_VAR  shift, and go to state 37

    BUILTIN_VAR  [reduce using rule 5 (config_block)]
    $default     reduce using rule 5 (config_block)

    config_block  go to state 38


State 28

   39 program_stmts: STRUCT ID SEMICOLON .

    $default  reduce using rule 39 (program_stmts)


State 29

   30 struct_block: OPEN_BRACE . CLOSE_BRACE
   31             | OPEN_BRACE . struct_stmts CLOSE_BRACE

    ID           shift, and go to state 39
    TYPE         shift, and go to state 40
    CLOSE_BRACE  shift, and go to state 41

    struct_stmts   go to state 42
    g_arr_dcl      go to state 43
    variable_dcl   go to state 44
    variable_spec  go to state 45


State 30

    3 struct_node: STRUCT ID struct_block . SEMICOLON

    SEMICOLON  shift, and go to state 46


State 31

    9 vertex: VERTEX ID OPEN_BRACE . stage_block CLOSE_BRACE SEMICOLON

    ID       shift, and go to state 39
    TYPE     shift, and go to state 40
    STRUCT   shift, and go to state 47
    UNIFORM  shift, and go to state 48

    ID        [reduce using rule 19 (stage_block)]
    TYPE      [reduce using rule 19 (stage_block)]
    STRUCT    [reduce using rule 19 (stage_block)]
    UNIFORM   [reduce using rule 19 (stage_block)]
    $default  reduce using rule 19 (stage_block)

    struct_node    go to state 49
    function_dcl   go to state 50
    function_def   go to state 51
    stage_block    go to state 52
    stage_stmts    go to state 53
    unifrom_block  go to state 54
    g_var_dcl      go to state 55
    g_arr_dcl      go to state 56
    variable_spec  go to state 57


State 32

   10 pixel: PIXEL ID OPEN_BRACE . stage_block CLOSE_BRACE SEMICOLON

    ID       shift, and go to state 39
    TYPE     shift, and go to state 40
    STRUCT   shift, and go to state 47
    UNIFORM  shift, and go to state 48

    ID        [reduce using rule 19 (stage_block)]
    TYPE      [reduce using rule 19 (stage_block)]
    STRUCT    [reduce using rule 19 (stage_block)]
    UNIFORM   [reduce using rule 19 (stage_block)]
    $default  reduce using rule 19 (stage_block)

    struct_node    go to state 49
    function_dcl   go to state 50
    function_def   go to state 51
    stage_block    go to state 58
    stage_stmts    go to state 53
    unifrom_block  go to state 54
    g_var_dcl      go to state 55
    g_arr_dcl      go to state 56
    variable_spec  go to state 57


State 33

   40 program_stmts: IOBUFFER ID SEMICOLON .

    $default  reduce using rule 40 (program_stmts)


State 34

   99 buffer_block: OPEN_BRACE . CLOSE_BRACE
  100             | OPEN_BRACE . buffer_stmts CLOSE_BRACE

    ID           shift, and go to state 39
    TYPE         shift, and go to state 40
    CLOSE_BRACE  shift, and go to state 59

    buffer_stmts       go to state 60
    semantic_variable  go to state 61
    variable_spec      go to state 62


State 35

    8 iobuffer: IOBUFFER ID buffer_block . SEMICOLON

    SEMICOLON  shift, and go to state 63


State 36

    2 program: PROGRAM ID OPEN_BRACE program_block CLOSE_BRACE SEMICOLON .

    $default  reduce using rule 2 (program)


State 37

    6 config_block: BUILTIN_VAR . EQL ID SEMICOLON

    EQL  shift, and go to state 64


State 38

    4 routine_node: ROUTINE ID OPEN_BRACE config_block . CLOSE_BRACE
    7 config_block: config_block . BUILTIN_VAR EQL ID SEMICOLON

    BUILTIN_VAR  shift, and go to state 65
    CLOSE_BRACE  shift, and go to state 66


State 39

  114 variable_spec: ID .

    $default  reduce using rule 114 (variable_spec)


State 40

  113 variable_spec: TYPE .

    $default  reduce using rule 113 (variable_spec)


State 41

   30 struct_block: OPEN_BRACE CLOSE_BRACE .

    $default  reduce using rule 30 (struct_block)


State 42

   31 struct_block: OPEN_BRACE struct_stmts . CLOSE_BRACE
   34 struct_stmts: struct_stmts . variable_dcl SEMICOLON
   35             | struct_stmts . g_arr_dcl SEMICOLON

    ID           shift, and go to state 39
    TYPE         shift, and go to state 40
    CLOSE_BRACE  shift, and go to state 67

    g_arr_dcl      go to state 68
    variable_dcl   go to state 69
    variable_spec  go to state 45


State 43

   33 struct_stmts: g_arr_dcl . SEMICOLON

    SEMICOLON  shift, and go to state 70


State 44

   32 struct_stmts: variable_dcl . SEMICOLON

    SEMICOLON  shift, and go to state 71


State 45

  105 g_arr_dcl: variable_spec . ID OPEN_BRACKET int_num CLOSE_BRACKET
  110 variable_dcl: variable_spec . id_list

    ID  shift, and go to state 72

    id_list  go to state 73


State 46

    3 struct_node: STRUCT ID struct_block SEMICOLON .

    $default  reduce using rule 3 (struct_node)


State 47

    3 struct_node: STRUCT . ID struct_block SEMICOLON
   23 stage_stmts: STRUCT . ID SEMICOLON

    ID  shift, and go to state 74


State 48

   29 unifrom_block: UNIFORM . ID struct_block

    ID  shift, and go to state 75


State 49

   22 stage_stmts: struct_node .

    $default  reduce using rule 22 (stage_stmts)


State 50

   13 function_def: function_dcl . block
   24 stage_stmts: function_dcl . SEMICOLON

    SEMICOLON   shift, and go to state 76
    OPEN_BRACE  shift, and go to state 77

    block  go to state 78


State 51

   25 stage_stmts: function_def .

    $default  reduce using rule 25 (stage_stmts)


State 52

    9 vertex: VERTEX ID OPEN_BRACE stage_block . CLOSE_BRACE SEMICOLON
   21 stage_block: stage_block . stage_stmts

    ID           shift, and go to state 39
    TYPE         shift, and go to state 40
    STRUCT       shift, and go to state 47
    UNIFORM      shift, and go to state 48
    CLOSE_BRACE  shift, and go to state 79

    struct_node    go to state 49
    function_dcl   go to state 50
    function_def   go to state 51
    stage_stmts    go to state 80
    unifrom_block  go to state 54
    g_var_dcl      go to state 55
    g_arr_dcl      go to state 56
    variable_spec  go to state 57


State 53

   20 stage_block: stage_stmts .

    $default  reduce using rule 20 (stage_block)


State 54

   27 stage_stmts: unifrom_block . SEMICOLON

    SEMICOLON  shift, and go to state 81


State 55

   26 stage_stmts: g_var_dcl . SEMICOLON

    SEMICOLON  shift, and go to state 82


State 56

   28 stage_stmts: g_arr_dcl . SEMICOLON

    SEMICOLON  shift, and go to state 83


State 57

   12 function_dcl: variable_spec . ID OPEN_PAREN arg_list CLOSE_PAREN
  104 g_var_dcl: variable_spec . g_id_list
  105 g_arr_dcl: variable_spec . ID OPEN_BRACKET int_num CLOSE_BRACKET

    ID  shift, and go to state 84

    g_id_list  go to state 85


State 58

   10 pixel: PIXEL ID OPEN_BRACE stage_block . CLOSE_BRACE SEMICOLON
   21 stage_block: stage_block . stage_stmts

    ID           shift, and go to state 39
    TYPE         shift, and go to state 40
    STRUCT       shift, and go to state 47
    UNIFORM      shift, and go to state 48
    CLOSE_BRACE  shift, and go to state 86

    struct_node    go to state 49
    function_dcl   go to state 50
    function_def   go to state 51
    stage_stmts    go to state 80
    unifrom_block  go to state 54
    g_var_dcl      go to state 55
    g_arr_dcl      go to state 56
    variable_spec  go to state 57


State 59

   99 buffer_block: OPEN_BRACE CLOSE_BRACE .

    $default  reduce using rule 99 (buffer_block)


State 60

  100 buffer_block: OPEN_BRACE buffer_stmts . CLOSE_BRACE
  102 buffer_stmts: buffer_stmts . semantic_variable SEMICOLON

    ID           shift, and go to state 39
    TYPE         shift, and go to state 40
    CLOSE_BRACE  shift, and go to state 87

    semantic_variable  go to state 88
    variable_spec      go to state 62


State 61

  101 buffer_stmts: semantic_variable . SEMICOLON

    SEMICOLON  shift, and go to state 89


State 62

  103 semantic_variable: variable_spec . ID COLON ID

    ID  shift, and go to state 90


State 63

    8 iobuffer: IOBUFFER ID buffer_block SEMICOLON .

    $default  reduce using rule 8 (iobuffer)


State 64

    6 config_block: BUILTIN_VAR EQL . ID SEMICOLON

    ID  shift, and go to state 91


State 65

    7 config_block: config_block BUILTIN_VAR . EQL ID SEMICOLON

    EQL  shift, and go to state 92


State 66

    4 routine_node: ROUTINE ID OPEN_BRACE config_block CLOSE_BRACE .

    $default  reduce using rule 4 (routine_node)


State 67

   31 struct_block: OPEN_BRACE struct_stmts CLOSE_BRACE .

    $default  reduce using rule 31 (struct_block)


State 68

   35 struct_stmts: struct_stmts g_arr_dcl . SEMICOLON

    SEMICOLON  shift, and go to state 93


State 69

   34 struct_stmts: struct_stmts variable_dcl . SEMICOLON

    SEMICOLON  shift, and go to state 94


State 70

   33 struct_stmts: g_arr_dcl SEMICOLON .

    $default  reduce using rule 33 (struct_stmts)


State 71

   32 struct_stmts: variable_dcl SEMICOLON .

    $default  reduce using rule 32 (struct_stmts)


State 72

  105 g_arr_dcl: variable_spec ID . OPEN_BRACKET int_num CLOSE_BRACKET
  111 id_list: ID .

    OPEN_BRACKET  shift, and go to state 95

    $default  reduce using rule 111 (id_list)


State 73

  110 variable_dcl: variable_spec id_list .
  112 id_list: id_list . COMMA ID

    COMMA  shift, and go to state 96

    $default  reduce using rule 110 (variable_dcl)


State 74

    3 struct_node: STRUCT ID . struct_block SEMICOLON
   23 stage_stmts: STRUCT ID . SEMICOLON

    SEMICOLON   shift, and go to state 97
    OPEN_BRACE  shift, and go to state 29

    struct_block  go to state 30


State 75

   29 unifrom_block: UNIFORM ID . struct_block

    OPEN_BRACE  shift, and go to state 29

    struct_block  go to state 98


State 76

   24 stage_stmts: function_dcl SEMICOLON .

    $default  reduce using rule 24 (stage_stmts)


State 77

   46 block: OPEN_BRACE . CLOSE_BRACE
   47      | OPEN_BRACE . stmts CLOSE_BRACE

    INTEGER      shift, and go to state 99
    ID           shift, and go to state 100
    TYPE         shift, and go to state 101
    BUILTIN_VAR  shift, and go to state 102
    FLOAT        shift, and go to state 103
    CLOSE_BRACE  shift, and go to state 104
    OPEN_PAREN   shift, and go to state 105
    MUL          shift, and go to state 106
    NOT          shift, and go to state 107
    INC          shift, and go to state 108
    DEC          shift, and go to state 109

    type_constructor  go to state 110
    stmts             go to state 111
    stmt              go to state 112
    expr_stmt         go to state 113
    expression        go to state 114
    func_call         go to state 115
    unary_expr        go to state 116
    assignment        go to state 117
    lvalue            go to state 118
    access_chain      go to state 119
    arr_access        go to state 120
    g_var_dcl         go to state 121
    g_arr_dcl         go to state 122
    variable_spec     go to state 123
    int_num           go to state 124
    float_num         go to state 125


State 78

   13 function_def: function_dcl block .

    $default  reduce using rule 13 (function_def)


State 79

    9 vertex: VERTEX ID OPEN_BRACE stage_block CLOSE_BRACE . SEMICOLON

    SEMICOLON  shift, and go to state 126


State 80

   21 stage_block: stage_block stage_stmts .

    $default  reduce using rule 21 (stage_block)


State 81

   27 stage_stmts: unifrom_block SEMICOLON .

    $default  reduce using rule 27 (stage_stmts)


State 82

   26 stage_stmts: g_var_dcl SEMICOLON .

    $default  reduce using rule 26 (stage_stmts)


State 83

   28 stage_stmts: g_arr_dcl SEMICOLON .

    $default  reduce using rule 28 (stage_stmts)


State 84

   12 function_dcl: variable_spec ID . OPEN_PAREN arg_list CLOSE_PAREN
  105 g_arr_dcl: variable_spec ID . OPEN_BRACKET int_num CLOSE_BRACKET
  106 g_id_list: ID .
  107          | ID . EQL expression

    OPEN_PAREN    shift, and go to state 127
    EQL           shift, and go to state 128
    OPEN_BRACKET  shift, and go to state 95

    $default  reduce using rule 106 (g_id_list)


State 85

  104 g_var_dcl: variable_spec g_id_list .
  108 g_id_list: g_id_list . COMMA ID
  109          | g_id_list . COMMA ID EQL expression

    COMMA  shift, and go to state 129

    $default  reduce using rule 104 (g_var_dcl)


State 86

   10 pixel: PIXEL ID OPEN_BRACE stage_block CLOSE_BRACE . SEMICOLON

    SEMICOLON  shift, and go to state 130


State 87

  100 buffer_block: OPEN_BRACE buffer_stmts CLOSE_BRACE .

    $default  reduce using rule 100 (buffer_block)


State 88

  102 buffer_stmts: buffer_stmts semantic_variable . SEMICOLON

    SEMICOLON  shift, and go to state 131


State 89

  101 buffer_stmts: semantic_variable SEMICOLON .

    $default  reduce using rule 101 (buffer_stmts)


State 90

  103 semantic_variable: variable_spec ID . COLON ID

    COLON  shift, and go to state 132


State 91

    6 config_block: BUILTIN_VAR EQL ID . SEMICOLON

    SEMICOLON  shift, and go to state 133


State 92

    7 config_block: config_block BUILTIN_VAR EQL . ID SEMICOLON

    ID  shift, and go to state 134


State 93

   35 struct_stmts: struct_stmts g_arr_dcl SEMICOLON .

    $default  reduce using rule 35 (struct_stmts)


State 94

   34 struct_stmts: struct_stmts variable_dcl SEMICOLON .

    $default  reduce using rule 34 (struct_stmts)


State 95

  105 g_arr_dcl: variable_spec ID OPEN_BRACKET . int_num CLOSE_BRACKET

    INTEGER  shift, and go to state 99

    int_num  go to state 135


State 96

  112 id_list: id_list COMMA . ID

    ID  shift, and go to state 136


State 97

   23 stage_stmts: STRUCT ID SEMICOLON .

    $default  reduce using rule 23 (stage_stmts)


State 98

   29 unifrom_block: UNIFORM ID struct_block .

    $default  reduce using rule 29 (unifrom_block)


State 99

  115 int_num: INTEGER .

    $default  reduce using rule 115 (int_num)


State 100

   92 access_chain: ID .
   98 arr_access: ID . OPEN_BRACKET expression CLOSE_BRACKET
  114 variable_spec: ID .

    OPEN_BRACKET  shift, and go to state 137

    ID        reduce using rule 114 (variable_spec)
    $default  reduce using rule 92 (access_chain)


State 101

   11 type_constructor: TYPE . OPEN_PAREN args CLOSE_PAREN
  113 variable_spec: TYPE .

    OPEN_PAREN  shift, and go to state 138

    $default  reduce using rule 113 (variable_spec)


State 102

   53 stmt: BUILTIN_VAR . EQL expression SEMICOLON

    EQL  shift, and go to state 139


State 103

  116 float_num: FLOAT .

    $default  reduce using rule 116 (float_num)


State 104

   46 block: OPEN_BRACE CLOSE_BRACE .

    $default  reduce using rule 46 (block)


State 105

   63 expression: OPEN_PAREN . expression CLOSE_PAREN

    INTEGER     shift, and go to state 99
    ID          shift, and go to state 140
    TYPE        shift, and go to state 141
    FLOAT       shift, and go to state 103
    OPEN_PAREN  shift, and go to state 105
    MUL         shift, and go to state 106
    NOT         shift, and go to state 107
    INC         shift, and go to state 108
    DEC         shift, and go to state 109

    type_constructor  go to state 110
    expression        go to state 142
    func_call         go to state 115
    unary_expr        go to state 116
    assignment        go to state 117
    lvalue            go to state 118
    access_chain      go to state 119
    arr_access        go to state 120
    int_num           go to state 124
    float_num         go to state 125


State 106

   71 unary_expr: MUL . expression

    INTEGER     shift, and go to state 99
    ID          shift, and go to state 140
    TYPE        shift, and go to state 141
    FLOAT       shift, and go to state 103
    OPEN_PAREN  shift, and go to state 105
    MUL         shift, and go to state 106
    NOT         shift, and go to state 107
    INC         shift, and go to state 108
    DEC         shift, and go to state 109

    type_constructor  go to state 110
    expression        go to state 143
    func_call         go to state 115
    unary_expr        go to state 116
    assignment        go to state 117
    lvalue            go to state 118
    access_chain      go to state 119
    arr_access        go to state 120
    int_num           go to state 124
    float_num         go to state 125


State 107

   68 unary_expr: NOT . expression

    INTEGER     shift, and go to state 99
    ID          shift, and go to state 140
    TYPE        shift, and go to state 141
    FLOAT       shift, and go to state 103
    OPEN_PAREN  shift, and go to state 105
    MUL         shift, and go to state 106
    NOT         shift, and go to state 107
    INC         shift, and go to state 108
    DEC         shift, and go to state 109

    type_constructor  go to state 110
    expression        go to state 144
    func_call         go to state 115
    unary_expr        go to state 116
    assignment        go to state 117
    lvalue            go to state 118
    access_chain      go to state 119
    arr_access        go to state 120
    int_num           go to state 124
    float_num         go to state 125


State 108

   69 unary_expr: INC . expression

    INTEGER     shift, and go to state 99
    ID          shift, and go to state 140
    TYPE        shift, and go to state 141
    FLOAT       shift, and go to state 103
    OPEN_PAREN  shift, and go to state 105
    MUL         shift, and go to state 106
    NOT         shift, and go to state 107
    INC         shift, and go to state 108
    DEC         shift, and go to state 109

    type_constructor  go to state 110
    expression        go to state 145
    func_call         go to state 115
    unary_expr        go to state 116
    assignment        go to state 117
    lvalue            go to state 118
    access_chain      go to state 119
    arr_access        go to state 120
    int_num           go to state 124
    float_num         go to state 125


State 109

   70 unary_expr: DEC . expression

    INTEGER     shift, and go to state 99
    ID          shift, and go to state 140
    TYPE        shift, and go to state 141
    FLOAT       shift, and go to state 103
    OPEN_PAREN  shift, and go to state 105
    MUL         shift, and go to state 106
    NOT         shift, and go to state 107
    INC         shift, and go to state 108
    DEC         shift, and go to state 109

    type_constructor  go to state 110
    expression        go to state 146
    func_call         go to state 115
    unary_expr        go to state 116
    assignment        go to state 117
    lvalue            go to state 118
    access_chain      go to state 119
    arr_access        go to state 120
    int_num           go to state 124
    float_num         go to state 125


State 110

   62 expression: type_constructor .

    $default  reduce using rule 62 (expression)


State 111

   47 block: OPEN_BRACE stmts . CLOSE_BRACE
   49 stmts: stmts . stmt

    INTEGER      shift, and go to state 99
    ID           shift, and go to state 100
    TYPE         shift, and go to state 101
    BUILTIN_VAR  shift, and go to state 102
    FLOAT        shift, and go to state 103
    CLOSE_BRACE  shift, and go to state 147
    OPEN_PAREN   shift, and go to state 105
    MUL          shift, and go to state 106
    NOT          shift, and go to state 107
    INC          shift, and go to state 108
    DEC          shift, and go to state 109

    type_constructor  go to state 110
    stmt              go to state 148
    expr_stmt         go to state 113
    expression        go to state 114
    func_call         go to state 115
    unary_expr        go to state 116
    assignment        go to state 117
    lvalue            go to state 118
    access_chain      go to state 119
    arr_access        go to state 120
    g_var_dcl         go to state 121
    g_arr_dcl         go to state 122
    variable_spec     go to state 123
    int_num           go to state 124
    float_num         go to state 125


State 112

   48 stmts: stmt .

    $default  reduce using rule 48 (stmts)


State 113

   50 stmt: expr_stmt .

    $default  reduce using rule 50 (stmt)


State 114

   54 expr_stmt: expression . SEMICOLON
   59 expression: expression . binary_op expression
   72 unary_expr: expression . INC
   73           | expression . DEC

    SEMICOLON  shift, and go to state 149
    PLUS       shift, and go to state 150
    MINUS      shift, and go to state 151
    MUL        shift, and go to state 152
    DEV        shift, and go to state 153
    MOD        shift, and go to state 154
    LEQL       shift, and go to state 155
    GEQL       shift, and go to state 156
    QEQL       shift, and go to state 157
    NOT_EQL    shift, and go to state 158
    AND        shift, and go to state 159
    OR         shift, and go to state 160
    INC        shift, and go to state 161
    DEC        shift, and go to state 162

    binary_op  go to state 163


State 115

   61 expression: func_call .

    $default  reduce using rule 61 (expression)


State 116

   60 expression: unary_expr .

    $default  reduce using rule 60 (expression)


State 117

   55 expression: assignment .

    $default  reduce using rule 55 (expression)


State 118

   56 expression: lvalue .
   85 assignment: lvalue . EQL expression
   86           | lvalue . PLUS_EQL expression
   87           | lvalue . MINUS_EQL expression
   88           | lvalue . DEV_EQL expression
   89           | lvalue . MUL_EQL expression
   90           | lvalue . MOD_EQL expression

    EQL        shift, and go to state 164
    PLUS_EQL   shift, and go to state 165
    MINUS_EQL  shift, and go to state 166
    MUL_EQL    shift, and go to state 167
    DEV_EQL    shift, and go to state 168
    MOD_EQL    shift, and go to state 169

    $default  reduce using rule 56 (expression)


State 119

   64 func_call: access_chain . OPEN_PAREN args CLOSE_PAREN
   91 lvalue: access_chain .
   94 access_chain: access_chain . DOT ID
   95             | access_chain . ARROW ID
   96             | access_chain . DOT arr_access
   97             | access_chain . ARROW arr_access

    OPEN_PAREN  shift, and go to state 170
    DOT         shift, and go to state 171
    ARROW       shift, and go to state 172

    $default  reduce using rule 91 (lvalue)


State 120

   93 access_chain: arr_access .

    $default  reduce using rule 93 (access_chain)


State 121

   51 stmt: g_var_dcl . SEMICOLON

    SEMICOLON  shift, and go to state 173


State 122

   52 stmt: g_arr_dcl . SEMICOLON

    SEMICOLON  shift, and go to state 174


State 123

  104 g_var_dcl: variable_spec . g_id_list
  105 g_arr_dcl: variable_spec . ID OPEN_BRACKET int_num CLOSE_BRACKET

    ID  shift, and go to state 175

    g_id_list  go to state 85


State 124

   57 expression: int_num .

    $default  reduce using rule 57 (expression)


State 125

   58 expression: float_num .

    $default  reduce using rule 58 (expression)


State 126

    9 vertex: VERTEX ID OPEN_BRACE stage_block CLOSE_BRACE SEMICOLON .

    $default  reduce using rule 9 (vertex)


State 127

   12 function_dcl: variable_spec ID OPEN_PAREN . arg_list CLOSE_PAREN

    ID    shift, and go to state 39
    TYPE  shift, and go to state 40

    $default  reduce using rule 14 (arg_list)

    arg_list       go to state 176
    arg            go to state 177
    variable_spec  go to state 178


State 128

  107 g_id_list: ID EQL . expression

    INTEGER     shift, and go to state 99
    ID          shift, and go to state 140
    TYPE        shift, and go to state 141
    FLOAT       shift, and go to state 103
    OPEN_PAREN  shift, and go to state 105
    MUL         shift, and go to state 106
    NOT         shift, and go to state 107
    INC         shift, and go to state 108
    DEC         shift, and go to state 109

    type_constructor  go to state 110
    expression        go to state 179
    func_call         go to state 115
    unary_expr        go to state 116
    assignment        go to state 117
    lvalue            go to state 118
    access_chain      go to state 119
    arr_access        go to state 120
    int_num           go to state 124
    float_num         go to state 125


State 129

  108 g_id_list: g_id_list COMMA . ID
  109          | g_id_list COMMA . ID EQL expression

    ID  shift, and go to state 180


State 130

   10 pixel: PIXEL ID OPEN_BRACE stage_block CLOSE_BRACE SEMICOLON .

    $default  reduce using rule 10 (pixel)


State 131

  102 buffer_stmts: buffer_stmts semantic_variable SEMICOLON .

    $default  reduce using rule 102 (buffer_stmts)


State 132

  103 semantic_variable: variable_spec ID COLON . ID

    ID  shift, and go to state 181


State 133

    6 config_block: BUILTIN_VAR EQL ID SEMICOLON .

    $default  reduce using rule 6 (config_block)


State 134

    7 config_block: config_block BUILTIN_VAR EQL ID . SEMICOLON

    SEMICOLON  shift, and go to state 182


State 135

  105 g_arr_dcl: variable_spec ID OPEN_BRACKET int_num . CLOSE_BRACKET

    CLOSE_BRACKET  shift, and go to state 183


State 136

  112 id_list: id_list COMMA ID .

    $default  reduce using rule 112 (id_list)


State 137

   98 arr_access: ID OPEN_BRACKET . expression CLOSE_BRACKET

    INTEGER     shift, and go to state 99
    ID          shift, and go to state 140
    TYPE        shift, and go to state 141
    FLOAT       shift, and go to state 103
    OPEN_PAREN  shift, and go to state 105
    MUL         shift, and go to state 106
    NOT         shift, and go to state 107
    INC         shift, and go to state 108
    DEC         shift, and go to state 109

    type_constructor  go to state 110
    expression        go to state 184
    func_call         go to state 115
    unary_expr        go to state 116
    assignment        go to state 117
    lvalue            go to state 118
    access_chain      go to state 119
    arr_access        go to state 120
    int_num           go to state 124
    float_num         go to state 125


State 138

   11 type_constructor: TYPE OPEN_PAREN . args CLOSE_PAREN

    INTEGER     shift, and go to state 99
    ID          shift, and go to state 140
    TYPE        shift, and go to state 141
    FLOAT       shift, and go to state 103
    OPEN_PAREN  shift, and go to state 105
    MUL         shift, and go to state 106
    NOT         shift, and go to state 107
    INC         shift, and go to state 108
    DEC         shift, and go to state 109

    $default  reduce using rule 65 (args)

    type_constructor  go to state 110
    expression        go to state 185
    func_call         go to state 115
    args              go to state 186
    unary_expr        go to state 116
    assignment        go to state 117
    lvalue            go to state 118
    access_chain      go to state 119
    arr_access        go to state 120
    int_num           go to state 124
    float_num         go to state 125


State 139

   53 stmt: BUILTIN_VAR EQL . expression SEMICOLON

    INTEGER     shift, and go to state 99
    ID          shift, and go to state 140
    TYPE        shift, and go to state 141
    FLOAT       shift, and go to state 103
    OPEN_PAREN  shift, and go to state 105
    MUL         shift, and go to state 106
    NOT         shift, and go to state 107
    INC         shift, and go to state 108
    DEC         shift, and go to state 109

    type_constructor  go to state 110
    expression        go to state 187
    func_call         go to state 115
    unary_expr        go to state 116
    assignment        go to state 117
    lvalue            go to state 118
    access_chain      go to state 119
    arr_access        go to state 120
    int_num           go to state 124
    float_num         go to state 125


State 140

   92 access_chain: ID .
   98 arr_access: ID . OPEN_BRACKET expression CLOSE_BRACKET

    OPEN_BRACKET  shift, and go to state 137

    $default  reduce using rule 92 (access_chain)


State 141

   11 type_constructor: TYPE . OPEN_PAREN args CLOSE_PAREN

    OPEN_PAREN  shift, and go to state 138


State 142

   59 expression: expression . binary_op expression
   63           | OPEN_PAREN expression . CLOSE_PAREN
   72 unary_expr: expression . INC
   73           | expression . DEC

    CLOSE_PAREN  shift, and go to state 188
    PLUS         shift, and go to state 150
    MINUS        shift, and go to state 151
    MUL          shift, and go to state 152
    DEV          shift, and go to state 153
    MOD          shift, and go to state 154
    LEQL         shift, and go to state 155
    GEQL         shift, and go to state 156
    QEQL         shift, and go to state 157
    NOT_EQL      shift, and go to state 158
    AND          shift, and go to state 159
    OR           shift, and go to state 160
    INC          shift, and go to state 161
    DEC          shift, and go to state 162

    binary_op  go to state 163


State 143

   59 expression: expression . binary_op expression
   71 unary_expr: MUL expression .
   72           | expression . INC
   73           | expression . DEC

    PLUS     shift, and go to state 150
    MINUS    shift, and go to state 151
    MUL      shift, and go to state 152
    DEV      shift, and go to state 153
    MOD      shift, and go to state 154
    LEQL     shift, and go to state 155
    GEQL     shift, and go to state 156
    QEQL     shift, and go to state 157
    NOT_EQL  shift, and go to state 158
    AND      shift, and go to state 159
    OR       shift, and go to state 160
    INC      shift, and go to state 161
    DEC      shift, and go to state 162

    PLUS      [reduce using rule 71 (unary_expr)]
    MINUS     [reduce using rule 71 (unary_expr)]
    MUL       [reduce using rule 71 (unary_expr)]
    DEV       [reduce using rule 71 (unary_expr)]
    MOD       [reduce using rule 71 (unary_expr)]
    LEQL      [reduce using rule 71 (unary_expr)]
    GEQL      [reduce using rule 71 (unary_expr)]
    QEQL      [reduce using rule 71 (unary_expr)]
    NOT_EQL   [reduce using rule 71 (unary_expr)]
    AND       [reduce using rule 71 (unary_expr)]
    OR        [reduce using rule 71 (unary_expr)]
    INC       [reduce using rule 71 (unary_expr)]
    DEC       [reduce using rule 71 (unary_expr)]
    $default  reduce using rule 71 (unary_expr)

    binary_op  go to state 163


State 144

   59 expression: expression . binary_op expression
   68 unary_expr: NOT expression .
   72           | expression . INC
   73           | expression . DEC

    PLUS     shift, and go to state 150
    MINUS    shift, and go to state 151
    MUL      shift, and go to state 152
    DEV      shift, and go to state 153
    MOD      shift, and go to state 154
    LEQL     shift, and go to state 155
    GEQL     shift, and go to state 156
    QEQL     shift, and go to state 157
    NOT_EQL  shift, and go to state 158
    AND      shift, and go to state 159
    OR       shift, and go to state 160
    INC      shift, and go to state 161
    DEC      shift, and go to state 162

    PLUS      [reduce using rule 68 (unary_expr)]
    MINUS     [reduce using rule 68 (unary_expr)]
    MUL       [reduce using rule 68 (unary_expr)]
    DEV       [reduce using rule 68 (unary_expr)]
    MOD       [reduce using rule 68 (unary_expr)]
    LEQL      [reduce using rule 68 (unary_expr)]
    GEQL      [reduce using rule 68 (unary_expr)]
    QEQL      [reduce using rule 68 (unary_expr)]
    NOT_EQL   [reduce using rule 68 (unary_expr)]
    AND       [reduce using rule 68 (unary_expr)]
    OR        [reduce using rule 68 (unary_expr)]
    INC       [reduce using rule 68 (unary_expr)]
    DEC       [reduce using rule 68 (unary_expr)]
    $default  reduce using rule 68 (unary_expr)

    binary_op  go to state 163


State 145

   59 expression: expression . binary_op expression
   69 unary_expr: INC expression .
   72           | expression . INC
   73           | expression . DEC

    PLUS     shift, and go to state 150
    MINUS    shift, and go to state 151
    MUL      shift, and go to state 152
    DEV      shift, and go to state 153
    MOD      shift, and go to state 154
    LEQL     shift, and go to state 155
    GEQL     shift, and go to state 156
    QEQL     shift, and go to state 157
    NOT_EQL  shift, and go to state 158
    AND      shift, and go to state 159
    OR       shift, and go to state 160
    INC      shift, and go to state 161
    DEC      shift, and go to state 162

    PLUS      [reduce using rule 69 (unary_expr)]
    MINUS     [reduce using rule 69 (unary_expr)]
    MUL       [reduce using rule 69 (unary_expr)]
    DEV       [reduce using rule 69 (unary_expr)]
    MOD       [reduce using rule 69 (unary_expr)]
    LEQL      [reduce using rule 69 (unary_expr)]
    GEQL      [reduce using rule 69 (unary_expr)]
    QEQL      [reduce using rule 69 (unary_expr)]
    NOT_EQL   [reduce using rule 69 (unary_expr)]
    AND       [reduce using rule 69 (unary_expr)]
    OR        [reduce using rule 69 (unary_expr)]
    INC       [reduce using rule 69 (unary_expr)]
    DEC       [reduce using rule 69 (unary_expr)]
    $default  reduce using rule 69 (unary_expr)

    binary_op  go to state 163


State 146

   59 expression: expression . binary_op expression
   70 unary_expr: DEC expression .
   72           | expression . INC
   73           | expression . DEC

    PLUS     shift, and go to state 150
    MINUS    shift, and go to state 151
    MUL      shift, and go to state 152
    DEV      shift, and go to state 153
    MOD      shift, and go to state 154
    LEQL     shift, and go to state 155
    GEQL     shift, and go to state 156
    QEQL     shift, and go to state 157
    NOT_EQL  shift, and go to state 158
    AND      shift, and go to state 159
    OR       shift, and go to state 160
    INC      shift, and go to state 161
    DEC      shift, and go to state 162

    PLUS      [reduce using rule 70 (unary_expr)]
    MINUS     [reduce using rule 70 (unary_expr)]
    MUL       [reduce using rule 70 (unary_expr)]
    DEV       [reduce using rule 70 (unary_expr)]
    MOD       [reduce using rule 70 (unary_expr)]
    LEQL      [reduce using rule 70 (unary_expr)]
    GEQL      [reduce using rule 70 (unary_expr)]
    QEQL      [reduce using rule 70 (unary_expr)]
    NOT_EQL   [reduce using rule 70 (unary_expr)]
    AND       [reduce using rule 70 (unary_expr)]
    OR        [reduce using rule 70 (unary_expr)]
    INC       [reduce using rule 70 (unary_expr)]
    DEC       [reduce using rule 70 (unary_expr)]
    $default  reduce using rule 70 (unary_expr)

    binary_op  go to state 163


State 147

   47 block: OPEN_BRACE stmts CLOSE_BRACE .

    $default  reduce using rule 47 (block)


State 148

   49 stmts: stmts stmt .

    $default  reduce using rule 49 (stmts)


State 149

   54 expr_stmt: expression SEMICOLON .

    $default  reduce using rule 54 (expr_stmt)


State 150

   74 binary_op: PLUS .

    $default  reduce using rule 74 (binary_op)


State 151

   75 binary_op: MINUS .

    $default  reduce using rule 75 (binary_op)


State 152

   76 binary_op: MUL .

    $default  reduce using rule 76 (binary_op)


State 153

   77 binary_op: DEV .

    $default  reduce using rule 77 (binary_op)


State 154

   78 binary_op: MOD .

    $default  reduce using rule 78 (binary_op)


State 155

   79 binary_op: LEQL .

    $default  reduce using rule 79 (binary_op)


State 156

   80 binary_op: GEQL .

    $default  reduce using rule 80 (binary_op)


State 157

   81 binary_op: QEQL .

    $default  reduce using rule 81 (binary_op)


State 158

   82 binary_op: NOT_EQL .

    $default  reduce using rule 82 (binary_op)


State 159

   83 binary_op: AND .

    $default  reduce using rule 83 (binary_op)


State 160

   84 binary_op: OR .

    $default  reduce using rule 84 (binary_op)


State 161

   72 unary_expr: expression INC .

    $default  reduce using rule 72 (unary_expr)


State 162

   73 unary_expr: expression DEC .

    $default  reduce using rule 73 (unary_expr)


State 163

   59 expression: expression binary_op . expression

    INTEGER     shift, and go to state 99
    ID          shift, and go to state 140
    TYPE        shift, and go to state 141
    FLOAT       shift, and go to state 103
    OPEN_PAREN  shift, and go to state 105
    MUL         shift, and go to state 106
    NOT         shift, and go to state 107
    INC         shift, and go to state 108
    DEC         shift, and go to state 109

    type_constructor  go to state 110
    expression        go to state 189
    func_call         go to state 115
    unary_expr        go to state 116
    assignment        go to state 117
    lvalue            go to state 118
    access_chain      go to state 119
    arr_access        go to state 120
    int_num           go to state 124
    float_num         go to state 125


State 164

   85 assignment: lvalue EQL . expression

    INTEGER     shift, and go to state 99
    ID          shift, and go to state 140
    TYPE        shift, and go to state 141
    FLOAT       shift, and go to state 103
    OPEN_PAREN  shift, and go to state 105
    MUL         shift, and go to state 106
    NOT         shift, and go to state 107
    INC         shift, and go to state 108
    DEC         shift, and go to state 109

    type_constructor  go to state 110
    expression        go to state 190
    func_call         go to state 115
    unary_expr        go to state 116
    assignment        go to state 117
    lvalue            go to state 118
    access_chain      go to state 119
    arr_access        go to state 120
    int_num           go to state 124
    float_num         go to state 125


State 165

   86 assignment: lvalue PLUS_EQL . expression

    INTEGER     shift, and go to state 99
    ID          shift, and go to state 140
    TYPE        shift, and go to state 141
    FLOAT       shift, and go to state 103
    OPEN_PAREN  shift, and go to state 105
    MUL         shift, and go to state 106
    NOT         shift, and go to state 107
    INC         shift, and go to state 108
    DEC         shift, and go to state 109

    type_constructor  go to state 110
    expression        go to state 191
    func_call         go to state 115
    unary_expr        go to state 116
    assignment        go to state 117
    lvalue            go to state 118
    access_chain      go to state 119
    arr_access        go to state 120
    int_num           go to state 124
    float_num         go to state 125


State 166

   87 assignment: lvalue MINUS_EQL . expression

    INTEGER     shift, and go to state 99
    ID          shift, and go to state 140
    TYPE        shift, and go to state 141
    FLOAT       shift, and go to state 103
    OPEN_PAREN  shift, and go to state 105
    MUL         shift, and go to state 106
    NOT         shift, and go to state 107
    INC         shift, and go to state 108
    DEC         shift, and go to state 109

    type_constructor  go to state 110
    expression        go to state 192
    func_call         go to state 115
    unary_expr        go to state 116
    assignment        go to state 117
    lvalue            go to state 118
    access_chain      go to state 119
    arr_access        go to state 120
    int_num           go to state 124
    float_num         go to state 125


State 167

   89 assignment: lvalue MUL_EQL . expression

    INTEGER     shift, and go to state 99
    ID          shift, and go to state 140
    TYPE        shift, and go to state 141
    FLOAT       shift, and go to state 103
    OPEN_PAREN  shift, and go to state 105
    MUL         shift, and go to state 106
    NOT         shift, and go to state 107
    INC         shift, and go to state 108
    DEC         shift, and go to state 109

    type_constructor  go to state 110
    expression        go to state 193
    func_call         go to state 115
    unary_expr        go to state 116
    assignment        go to state 117
    lvalue            go to state 118
    access_chain      go to state 119
    arr_access        go to state 120
    int_num           go to state 124
    float_num         go to state 125


State 168

   88 assignment: lvalue DEV_EQL . expression

    INTEGER     shift, and go to state 99
    ID          shift, and go to state 140
    TYPE        shift, and go to state 141
    FLOAT       shift, and go to state 103
    OPEN_PAREN  shift, and go to state 105
    MUL         shift, and go to state 106
    NOT         shift, and go to state 107
    INC         shift, and go to state 108
    DEC         shift, and go to state 109

    type_constructor  go to state 110
    expression        go to state 194
    func_call         go to state 115
    unary_expr        go to state 116
    assignment        go to state 117
    lvalue            go to state 118
    access_chain      go to state 119
    arr_access        go to state 120
    int_num           go to state 124
    float_num         go to state 125


State 169

   90 assignment: lvalue MOD_EQL . expression

    INTEGER     shift, and go to state 99
    ID          shift, and go to state 140
    TYPE        shift, and go to state 141
    FLOAT       shift, and go to state 103
    OPEN_PAREN  shift, and go to state 105
    MUL         shift, and go to state 106
    NOT         shift, and go to state 107
    INC         shift, and go to state 108
    DEC         shift, and go to state 109

    type_constructor  go to state 110
    expression        go to state 195
    func_call         go to state 115
    unary_expr        go to state 116
    assignment        go to state 117
    lvalue            go to state 118
    access_chain      go to state 119
    arr_access        go to state 120
    int_num           go to state 124
    float_num         go to state 125


State 170

   64 func_call: access_chain OPEN_PAREN . args CLOSE_PAREN

    INTEGER     shift, and go to state 99
    ID          shift, and go to state 140
    TYPE        shift, and go to state 141
    FLOAT       shift, and go to state 103
    OPEN_PAREN  shift, and go to state 105
    MUL         shift, and go to state 106
    NOT         shift, and go to state 107
    INC         shift, and go to state 108
    DEC         shift, and go to state 109

    $default  reduce using rule 65 (args)

    type_constructor  go to state 110
    expression        go to state 185
    func_call         go to state 115
    args              go to state 196
    unary_expr        go to state 116
    assignment        go to state 117
    lvalue            go to state 118
    access_chain      go to state 119
    arr_access        go to state 120
    int_num           go to state 124
    float_num         go to state 125


State 171

   94 access_chain: access_chain DOT . ID
   96             | access_chain DOT . arr_access

    ID  shift, and go to state 197

    arr_access  go to state 198


State 172

   95 access_chain: access_chain ARROW . ID
   97             | access_chain ARROW . arr_access

    ID  shift, and go to state 199

    arr_access  go to state 200


State 173

   51 stmt: g_var_dcl SEMICOLON .

    $default  reduce using rule 51 (stmt)


State 174

   52 stmt: g_arr_dcl SEMICOLON .

    $default  reduce using rule 52 (stmt)


State 175

  105 g_arr_dcl: variable_spec ID . OPEN_BRACKET int_num CLOSE_BRACKET
  106 g_id_list: ID .
  107          | ID . EQL expression

    EQL           shift, and go to state 128
    OPEN_BRACKET  shift, and go to state 95

    $default  reduce using rule 106 (g_id_list)


State 176

   12 function_dcl: variable_spec ID OPEN_PAREN arg_list . CLOSE_PAREN
   16 arg_list: arg_list . COMMA arg

    COMMA        shift, and go to state 201
    CLOSE_PAREN  shift, and go to state 202


State 177

   15 arg_list: arg .

    $default  reduce using rule 15 (arg_list)


State 178

   17 arg: variable_spec .
   18    | variable_spec . ID

    ID  shift, and go to state 203

    $default  reduce using rule 17 (arg)


State 179

   59 expression: expression . binary_op expression
   72 unary_expr: expression . INC
   73           | expression . DEC
  107 g_id_list: ID EQL expression .

    PLUS     shift, and go to state 150
    MINUS    shift, and go to state 151
    MUL      shift, and go to state 152
    DEV      shift, and go to state 153
    MOD      shift, and go to state 154
    LEQL     shift, and go to state 155
    GEQL     shift, and go to state 156
    QEQL     shift, and go to state 157
    NOT_EQL  shift, and go to state 158
    AND      shift, and go to state 159
    OR       shift, and go to state 160
    INC      shift, and go to state 161
    DEC      shift, and go to state 162

    $default  reduce using rule 107 (g_id_list)

    binary_op  go to state 163


State 180

  108 g_id_list: g_id_list COMMA ID .
  109          | g_id_list COMMA ID . EQL expression

    EQL  shift, and go to state 204

    $default  reduce using rule 108 (g_id_list)


State 181

  103 semantic_variable: variable_spec ID COLON ID .

    $default  reduce using rule 103 (semantic_variable)


State 182

    7 config_block: config_block BUILTIN_VAR EQL ID SEMICOLON .

    $default  reduce using rule 7 (config_block)


State 183

  105 g_arr_dcl: variable_spec ID OPEN_BRACKET int_num CLOSE_BRACKET .

    $default  reduce using rule 105 (g_arr_dcl)


State 184

   59 expression: expression . binary_op expression
   72 unary_expr: expression . INC
   73           | expression . DEC
   98 arr_access: ID OPEN_BRACKET expression . CLOSE_BRACKET

    CLOSE_BRACKET  shift, and go to state 205
    PLUS           shift, and go to state 150
    MINUS          shift, and go to state 151
    MUL            shift, and go to state 152
    DEV            shift, and go to state 153
    MOD            shift, and go to state 154
    LEQL           shift, and go to state 155
    GEQL           shift, and go to state 156
    QEQL           shift, and go to state 157
    NOT_EQL        shift, and go to state 158
    AND            shift, and go to state 159
    OR             shift, and go to state 160
    INC            shift, and go to state 161
    DEC            shift, and go to state 162

    binary_op  go to state 163


State 185

   59 expression: expression . binary_op expression
   66 args: expression .
   72 unary_expr: expression . INC
   73           | expression . DEC

    PLUS     shift, and go to state 150
    MINUS    shift, and go to state 151
    MUL      shift, and go to state 152
    DEV      shift, and go to state 153
    MOD      shift, and go to state 154
    LEQL     shift, and go to state 155
    GEQL     shift, and go to state 156
    QEQL     shift, and go to state 157
    NOT_EQL  shift, and go to state 158
    AND      shift, and go to state 159
    OR       shift, and go to state 160
    INC      shift, and go to state 161
    DEC      shift, and go to state 162

    $default  reduce using rule 66 (args)

    binary_op  go to state 163


State 186

   11 type_constructor: TYPE OPEN_PAREN args . CLOSE_PAREN
   67 args: args . COMMA expression

    COMMA        shift, and go to state 206
    CLOSE_PAREN  shift, and go to state 207


State 187

   53 stmt: BUILTIN_VAR EQL expression . SEMICOLON
   59 expression: expression . binary_op expression
   72 unary_expr: expression . INC
   73           | expression . DEC

    SEMICOLON  shift, and go to state 208
    PLUS       shift, and go to state 150
    MINUS      shift, and go to state 151
    MUL        shift, and go to state 152
    DEV        shift, and go to state 153
    MOD        shift, and go to state 154
    LEQL       shift, and go to state 155
    GEQL       shift, and go to state 156
    QEQL       shift, and go to state 157
    NOT_EQL    shift, and go to state 158
    AND        shift, and go to state 159
    OR         shift, and go to state 160
    INC        shift, and go to state 161
    DEC        shift, and go to state 162

    binary_op  go to state 163


State 188

   63 expression: OPEN_PAREN expression CLOSE_PAREN .

    $default  reduce using rule 63 (expression)


State 189

   59 expression: expression . binary_op expression
   59           | expression binary_op expression .
   72 unary_expr: expression . INC
   73           | expression . DEC

    PLUS     shift, and go to state 150
    MINUS    shift, and go to state 151
    MUL      shift, and go to state 152
    DEV      shift, and go to state 153
    MOD      shift, and go to state 154
    LEQL     shift, and go to state 155
    GEQL     shift, and go to state 156
    QEQL     shift, and go to state 157
    NOT_EQL  shift, and go to state 158
    AND      shift, and go to state 159
    OR       shift, and go to state 160
    INC      shift, and go to state 161
    DEC      shift, and go to state 162

    PLUS      [reduce using rule 59 (expression)]
    MINUS     [reduce using rule 59 (expression)]
    MUL       [reduce using rule 59 (expression)]
    DEV       [reduce using rule 59 (expression)]
    MOD       [reduce using rule 59 (expression)]
    LEQL      [reduce using rule 59 (expression)]
    GEQL      [reduce using rule 59 (expression)]
    QEQL      [reduce using rule 59 (expression)]
    NOT_EQL   [reduce using rule 59 (expression)]
    AND       [reduce using rule 59 (expression)]
    OR        [reduce using rule 59 (expression)]
    INC       [reduce using rule 59 (expression)]
    DEC       [reduce using rule 59 (expression)]
    $default  reduce using rule 59 (expression)

    binary_op  go to state 163


State 190

   59 expression: expression . binary_op expression
   72 unary_expr: expression . INC
   73           | expression . DEC
   85 assignment: lvalue EQL expression .

    PLUS     shift, and go to state 150
    MINUS    shift, and go to state 151
    MUL      shift, and go to state 152
    DEV      shift, and go to state 153
    MOD      shift, and go to state 154
    LEQL     shift, and go to state 155
    GEQL     shift, and go to state 156
    QEQL     shift, and go to state 157
    NOT_EQL  shift, and go to state 158
    AND      shift, and go to state 159
    OR       shift, and go to state 160
    INC      shift, and go to state 161
    DEC      shift, and go to state 162

    PLUS      [reduce using rule 85 (assignment)]
    MINUS     [reduce using rule 85 (assignment)]
    MUL       [reduce using rule 85 (assignment)]
    DEV       [reduce using rule 85 (assignment)]
    MOD       [reduce using rule 85 (assignment)]
    LEQL      [reduce using rule 85 (assignment)]
    GEQL      [reduce using rule 85 (assignment)]
    QEQL      [reduce using rule 85 (assignment)]
    NOT_EQL   [reduce using rule 85 (assignment)]
    AND       [reduce using rule 85 (assignment)]
    OR        [reduce using rule 85 (assignment)]
    INC       [reduce using rule 85 (assignment)]
    DEC       [reduce using rule 85 (assignment)]
    $default  reduce using rule 85 (assignment)

    binary_op  go to state 163


State 191

   59 expression: expression . binary_op expression
   72 unary_expr: expression . INC
   73           | expression . DEC
   86 assignment: lvalue PLUS_EQL expression .

    PLUS     shift, and go to state 150
    MINUS    shift, and go to state 151
    MUL      shift, and go to state 152
    DEV      shift, and go to state 153
    MOD      shift, and go to state 154
    LEQL     shift, and go to state 155
    GEQL     shift, and go to state 156
    QEQL     shift, and go to state 157
    NOT_EQL  shift, and go to state 158
    AND      shift, and go to state 159
    OR       shift, and go to state 160
    INC      shift, and go to state 161
    DEC      shift, and go to state 162

    PLUS      [reduce using rule 86 (assignment)]
    MINUS     [reduce using rule 86 (assignment)]
    MUL       [reduce using rule 86 (assignment)]
    DEV       [reduce using rule 86 (assignment)]
    MOD       [reduce using rule 86 (assignment)]
    LEQL      [reduce using rule 86 (assignment)]
    GEQL      [reduce using rule 86 (assignment)]
    QEQL      [reduce using rule 86 (assignment)]
    NOT_EQL   [reduce using rule 86 (assignment)]
    AND       [reduce using rule 86 (assignment)]
    OR        [reduce using rule 86 (assignment)]
    INC       [reduce using rule 86 (assignment)]
    DEC       [reduce using rule 86 (assignment)]
    $default  reduce using rule 86 (assignment)

    binary_op  go to state 163


State 192

   59 expression: expression . binary_op expression
   72 unary_expr: expression . INC
   73           | expression . DEC
   87 assignment: lvalue MINUS_EQL expression .

    PLUS     shift, and go to state 150
    MINUS    shift, and go to state 151
    MUL      shift, and go to state 152
    DEV      shift, and go to state 153
    MOD      shift, and go to state 154
    LEQL     shift, and go to state 155
    GEQL     shift, and go to state 156
    QEQL     shift, and go to state 157
    NOT_EQL  shift, and go to state 158
    AND      shift, and go to state 159
    OR       shift, and go to state 160
    INC      shift, and go to state 161
    DEC      shift, and go to state 162

    PLUS      [reduce using rule 87 (assignment)]
    MINUS     [reduce using rule 87 (assignment)]
    MUL       [reduce using rule 87 (assignment)]
    DEV       [reduce using rule 87 (assignment)]
    MOD       [reduce using rule 87 (assignment)]
    LEQL      [reduce using rule 87 (assignment)]
    GEQL      [reduce using rule 87 (assignment)]
    QEQL      [reduce using rule 87 (assignment)]
    NOT_EQL   [reduce using rule 87 (assignment)]
    AND       [reduce using rule 87 (assignment)]
    OR        [reduce using rule 87 (assignment)]
    INC       [reduce using rule 87 (assignment)]
    DEC       [reduce using rule 87 (assignment)]
    $default  reduce using rule 87 (assignment)

    binary_op  go to state 163


State 193

   59 expression: expression . binary_op expression
   72 unary_expr: expression . INC
   73           | expression . DEC
   89 assignment: lvalue MUL_EQL expression .

    PLUS     shift, and go to state 150
    MINUS    shift, and go to state 151
    MUL      shift, and go to state 152
    DEV      shift, and go to state 153
    MOD      shift, and go to state 154
    LEQL     shift, and go to state 155
    GEQL     shift, and go to state 156
    QEQL     shift, and go to state 157
    NOT_EQL  shift, and go to state 158
    AND      shift, and go to state 159
    OR       shift, and go to state 160
    INC      shift, and go to state 161
    DEC      shift, and go to state 162

    PLUS      [reduce using rule 89 (assignment)]
    MINUS     [reduce using rule 89 (assignment)]
    MUL       [reduce using rule 89 (assignment)]
    DEV       [reduce using rule 89 (assignment)]
    MOD       [reduce using rule 89 (assignment)]
    LEQL      [reduce using rule 89 (assignment)]
    GEQL      [reduce using rule 89 (assignment)]
    QEQL      [reduce using rule 89 (assignment)]
    NOT_EQL   [reduce using rule 89 (assignment)]
    AND       [reduce using rule 89 (assignment)]
    OR        [reduce using rule 89 (assignment)]
    INC       [reduce using rule 89 (assignment)]
    DEC       [reduce using rule 89 (assignment)]
    $default  reduce using rule 89 (assignment)

    binary_op  go to state 163


State 194

   59 expression: expression . binary_op expression
   72 unary_expr: expression . INC
   73           | expression . DEC
   88 assignment: lvalue DEV_EQL expression .

    PLUS     shift, and go to state 150
    MINUS    shift, and go to state 151
    MUL      shift, and go to state 152
    DEV      shift, and go to state 153
    MOD      shift, and go to state 154
    LEQL     shift, and go to state 155
    GEQL     shift, and go to state 156
    QEQL     shift, and go to state 157
    NOT_EQL  shift, and go to state 158
    AND      shift, and go to state 159
    OR       shift, and go to state 160
    INC      shift, and go to state 161
    DEC      shift, and go to state 162

    PLUS      [reduce using rule 88 (assignment)]
    MINUS     [reduce using rule 88 (assignment)]
    MUL       [reduce using rule 88 (assignment)]
    DEV       [reduce using rule 88 (assignment)]
    MOD       [reduce using rule 88 (assignment)]
    LEQL      [reduce using rule 88 (assignment)]
    GEQL      [reduce using rule 88 (assignment)]
    QEQL      [reduce using rule 88 (assignment)]
    NOT_EQL   [reduce using rule 88 (assignment)]
    AND       [reduce using rule 88 (assignment)]
    OR        [reduce using rule 88 (assignment)]
    INC       [reduce using rule 88 (assignment)]
    DEC       [reduce using rule 88 (assignment)]
    $default  reduce using rule 88 (assignment)

    binary_op  go to state 163


State 195

   59 expression: expression . binary_op expression
   72 unary_expr: expression . INC
   73           | expression . DEC
   90 assignment: lvalue MOD_EQL expression .

    PLUS     shift, and go to state 150
    MINUS    shift, and go to state 151
    MUL      shift, and go to state 152
    DEV      shift, and go to state 153
    MOD      shift, and go to state 154
    LEQL     shift, and go to state 155
    GEQL     shift, and go to state 156
    QEQL     shift, and go to state 157
    NOT_EQL  shift, and go to state 158
    AND      shift, and go to state 159
    OR       shift, and go to state 160
    INC      shift, and go to state 161
    DEC      shift, and go to state 162

    PLUS      [reduce using rule 90 (assignment)]
    MINUS     [reduce using rule 90 (assignment)]
    MUL       [reduce using rule 90 (assignment)]
    DEV       [reduce using rule 90 (assignment)]
    MOD       [reduce using rule 90 (assignment)]
    LEQL      [reduce using rule 90 (assignment)]
    GEQL      [reduce using rule 90 (assignment)]
    QEQL      [reduce using rule 90 (assignment)]
    NOT_EQL   [reduce using rule 90 (assignment)]
    AND       [reduce using rule 90 (assignment)]
    OR        [reduce using rule 90 (assignment)]
    INC       [reduce using rule 90 (assignment)]
    DEC       [reduce using rule 90 (assignment)]
    $default  reduce using rule 90 (assignment)

    binary_op  go to state 163


State 196

   64 func_call: access_chain OPEN_PAREN args . CLOSE_PAREN
   67 args: args . COMMA expression

    COMMA        shift, and go to state 206
    CLOSE_PAREN  shift, and go to state 209


State 197

   94 access_chain: access_chain DOT ID .
   98 arr_access: ID . OPEN_BRACKET expression CLOSE_BRACKET

    OPEN_BRACKET  shift, and go to state 137

    $default  reduce using rule 94 (access_chain)


State 198

   96 access_chain: access_chain DOT arr_access .

    $default  reduce using rule 96 (access_chain)


State 199

   95 access_chain: access_chain ARROW ID .
   98 arr_access: ID . OPEN_BRACKET expression CLOSE_BRACKET

    OPEN_BRACKET  shift, and go to state 137

    $default  reduce using rule 95 (access_chain)


State 200

   97 access_chain: access_chain ARROW arr_access .

    $default  reduce using rule 97 (access_chain)


State 201

   16 arg_list: arg_list COMMA . arg

    ID    shift, and go to state 39
    TYPE  shift, and go to state 40

    arg            go to state 210
    variable_spec  go to state 178


State 202

   12 function_dcl: variable_spec ID OPEN_PAREN arg_list CLOSE_PAREN .

    $default  reduce using rule 12 (function_dcl)


State 203

   18 arg: variable_spec ID .

    $default  reduce using rule 18 (arg)


State 204

  109 g_id_list: g_id_list COMMA ID EQL . expression

    INTEGER     shift, and go to state 99
    ID          shift, and go to state 140
    TYPE        shift, and go to state 141
    FLOAT       shift, and go to state 103
    OPEN_PAREN  shift, and go to state 105
    MUL         shift, and go to state 106
    NOT         shift, and go to state 107
    INC         shift, and go to state 108
    DEC         shift, and go to state 109

    type_constructor  go to state 110
    expression        go to state 211
    func_call         go to state 115
    unary_expr        go to state 116
    assignment        go to state 117
    lvalue            go to state 118
    access_chain      go to state 119
    arr_access        go to state 120
    int_num           go to state 124
    float_num         go to state 125


State 205

   98 arr_access: ID OPEN_BRACKET expression CLOSE_BRACKET .

    $default  reduce using rule 98 (arr_access)


State 206

   67 args: args COMMA . expression

    INTEGER     shift, and go to state 99
    ID          shift, and go to state 140
    TYPE        shift, and go to state 141
    FLOAT       shift, and go to state 103
    OPEN_PAREN  shift, and go to state 105
    MUL         shift, and go to state 106
    NOT         shift, and go to state 107
    INC         shift, and go to state 108
    DEC         shift, and go to state 109

    type_constructor  go to state 110
    expression        go to state 212
    func_call         go to state 115
    unary_expr        go to state 116
    assignment        go to state 117
    lvalue            go to state 118
    access_chain      go to state 119
    arr_access        go to state 120
    int_num           go to state 124
    float_num         go to state 125


State 207

   11 type_constructor: TYPE OPEN_PAREN args CLOSE_PAREN .

    $default  reduce using rule 11 (type_constructor)


State 208

   53 stmt: BUILTIN_VAR EQL expression SEMICOLON .

    $default  reduce using rule 53 (stmt)


State 209

   64 func_call: access_chain OPEN_PAREN args CLOSE_PAREN .

    $default  reduce using rule 64 (func_call)


State 210

   16 arg_list: arg_list COMMA arg .

    $default  reduce using rule 16 (arg_list)


State 211

   59 expression: expression . binary_op expression
   72 unary_expr: expression . INC
   73           | expression . DEC
  109 g_id_list: g_id_list COMMA ID EQL expression .

    PLUS     shift, and go to state 150
    MINUS    shift, and go to state 151
    MUL      shift, and go to state 152
    DEV      shift, and go to state 153
    MOD      shift, and go to state 154
    LEQL     shift, and go to state 155
    GEQL     shift, and go to state 156
    QEQL     shift, and go to state 157
    NOT_EQL  shift, and go to state 158
    AND      shift, and go to state 159
    OR       shift, and go to state 160
    INC      shift, and go to state 161
    DEC      shift, and go to state 162

    $default  reduce using rule 109 (g_id_list)

    binary_op  go to state 163


State 212

   59 expression: expression . binary_op expression
   67 args: args COMMA expression .
   72 unary_expr: expression . INC
   73           | expression . DEC

    PLUS     shift, and go to state 150
    MINUS    shift, and go to state 151
    MUL      shift, and go to state 152
    DEV      shift, and go to state 153
    MOD      shift, and go to state 154
    LEQL     shift, and go to state 155
    GEQL     shift, and go to state 156
    QEQL     shift, and go to state 157
    NOT_EQL  shift, and go to state 158
    AND      shift, and go to state 159
    OR       shift, and go to state 160
    INC      shift, and go to state 161
    DEC      shift, and go to state 162

    $default  reduce using rule 67 (args)

    binary_op  go to state 163
