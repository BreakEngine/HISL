%{
#include <iostream>
#include <string>
#include <vector>
#include "PTree.hpp"
#include "Driver.hpp"
extern HISL::Driver* driver;
extern int yylex();
void yyerror(std::string e);
void report(std::string e);
%}


%union{
  int inum;
  std::string* value;
  HISL::PTNode* pt_node;
  HISL::PTInt* pt_integer;
  HISL::PTFloat* pt_float;
  std::string* pt_string;
  HISL::PTVariableList* pt_variable_list;
  std::vector<HISL::PTVariableDeclaration>* pt_variable_declaration_list;
  HISL::PTVariableDeclaration* pt_variable_declaration;
  std::vector<HISL::PTSemanticVariable>* pt_semantic_variable_list;
  HISL::PTBlock* pt_block;
  HISL::PTStatement* pt_statement;
  HISL::PTArg* pt_argument;
  std::vector<HISL::PTArg>* pt_argument_list;
  HISL::PTFunctionDeclaration* pt_function_declaration;
  HISL::PTFunctionDefinition* pt_function_definition;
  HISL::PTProgram* pt_program;
  HISL::PTStruct* pt_struct;
  HISL::PTUniform* pt_uniform;
  HISL::PTArrayDeclaration* pt_array_declaration;
  HISL::PTIOBuffer* pt_iobuffer;
  HISL::PTStage* pt_stage;
  HISL::PTExpressionStmt* pt_expression_statment;
  HISL::PTAssignment* pt_assignment;
  HISL::PTExpression* pt_expression;
  HISL::PTLValue* pt_lvalue;
  HISL::PTUnaryExpression* pt_unary_expression;
  std::vector<HISL::PTStatement*>* pt_statement_list;
  HISL::PTArrayCall* ptr_array_call;
  HISL::PTFunctionCall* ptr_function_call;
  std::vector<HISL::PTExpression*>* pt_expression_list;
  std::vector<HISL::PTConfig*>* pt_config_list;
  HISL::PTRoutine* pt_routine;
  HISL::PTSemanticVariable* pt_semantic_variable;
  HISL::PTTypeConstructor* pt_type_constructor;
  HISL::PTPreQualifier* pt_pre_qualifier;
  HISL::PTPostQualifier* pt_post_qualifier;
  HISL::PTDeclarator* pt_declarator;
  HISL::PTInitDeclarator* pt_init_declarator;
  std::vector<HISL::PTInitDeclarator*>* pt_init_declarator_list;
  HISL::PTRAccessChain* pt_access_chain;
  HISL::PTRFunctionCall* pt_function_call;
  HISL::PTRArrayCall* pt_array_call;
  HISL::PTRVariableCall* pt_variable_call;
}

%token<value> INTEGER ID TYPE BUILTIN_VAR
%token<value> FLOAT STRING 

%token<inum> PROGRAM SEMICOLON ROUTINE STRUCT VERTEX PIXEL IOBUFFER UNIFORM
%token<inum> OPEN_BRACE CLOSE_BRACE COMMA COLON OPEN_PAREN CLOSE_PAREN EQL
%token<inum> DOT ARROW OPEN_BRACKET CLOSE_BRACKET PLUS_EQL MINUS_EQL MUL_EQL
%token<inum> DEV_EQL MOD_EQL PLUS MINUS MUL DEV MOD LEQL GEQL QEQL NOT_EQL
%token<inum> AND OR NOT INC DEC STD RETURN IF ELSE WHILE FOR GLSL HLSL

%type<pt_node> variable_spec start

%type<pt_variable_declaration> variable_declaration

%type<pt_init_declarator_list> init_declarator_list

%type<pt_lvalue> r_access_element

%type<pt_access_chain> r_access_chain

%type<pt_statement> struct_stmt r_jump_statement r_selection_statement r_iteration_statement r_native_block

%type<pt_expression_list> initializer expression_list

%type<pt_post_qualifier> post_op

%type<pt_declarator> declarator

%type<pt_init_declarator> init_declarator

%type<pt_type_constructor> type_constructor

%type<pt_stage> vertex pixel

%type<pt_routine> routine_node

%type<pt_uniform> unifrom_block

%type<pt_config_list> config_block

%type<pt_semantic_variable> buffer_stmts semantic_variable

%type<pt_semantic_variable_list> r_buffer_block

%type<pt_block> r_stage_block r_block r_program_block

%type<pt_statement_list> stmts struct_stmts struct_block 

%type<pt_statement> r_stage_stmts r_program_stmts r_stmt

%type<pt_argument> arg

%type<pt_argument_list> arg_list;

%type<pt_function_declaration> function_dcl

%type<pt_function_definition> function_def

%type<pt_program> program

%type<pt_struct> struct_node

%type<pt_iobuffer> iobuffer

%type<pt_expression_statment> expr_stmt

%type<pt_assignment> assignment

%type<pt_expression> expression

%type<pt_string> r_binary_op

%type<pt_unary_expression> unary_expr

%type<pt_integer> r_integer

%type<pt_float> r_float

%type<pt_expression_list> args;

%%
start           : program {$$ = $1;}
                ;

program         : PROGRAM ID OPEN_BRACE  CLOSE_BRACE SEMICOLON {$$ = driver->createProgram((HISL::PTId*)driver->createId(*$2),driver->createBlock()); driver->m_PTroot->m_children.push_back($$);}
                | PROGRAM ID OPEN_BRACE r_program_block CLOSE_BRACE SEMICOLON {$$ = driver->createProgram((HISL::PTId*)driver->createId(*$2),$4); driver->m_PTroot->m_children.push_back($$);}
                ;

struct_node     : STRUCT ID OPEN_BRACE  CLOSE_BRACE {$$ = driver->createStruct(driver->createId(*$2),*new std::vector<HISL::PTStatement*>()); driver->m_PTroot->m_children.push_back($$);}
                | STRUCT ID OPEN_BRACE struct_block CLOSE_BRACE {$$ = driver->createStruct(driver->createId(*$2),*$4); driver->m_PTroot->m_children.push_back($$);}
                ;

routine_node    : ROUTINE ID OPEN_BRACE CLOSE_BRACE { $$ = driver->createRoutine(driver->createId(*$2),new std::vector<HISL::PTConfig*>());}
                | ROUTINE ID OPEN_BRACE config_block CLOSE_BRACE { $$ = driver->createRoutine(driver->createId(*$2),$4);}
                ;

config_block    : BUILTIN_VAR EQL ID SEMICOLON {$$ = new std::vector<HISL::PTConfig*>();
                 $$->push_back(driver->createConfigStatement(driver->createId(*$1),driver->createId(*$3)));}
                | config_block BUILTIN_VAR EQL ID SEMICOLON {$1->push_back(driver->createConfigStatement(driver->createId(*$2),driver->createId(*$4)));}
                ;

iobuffer        : IOBUFFER ID OPEN_BRACE CLOSE_BRACE{$$ = driver->createBuffer(driver->createId(*$2),*new std::vector<HISL::PTSemanticVariable>()); driver->m_PTroot->m_children.push_back($$);}
                | IOBUFFER ID OPEN_BRACE r_buffer_block CLOSE_BRACE{$$ = driver->createBuffer(driver->createId(*$2),*$4); driver->m_PTroot->m_children.push_back($$);}
                ;

vertex          : VERTEX ID OPEN_BRACE r_stage_block CLOSE_BRACE {$$ = driver->createVertex(driver->createId(*$2),$4);driver->m_PTroot->m_children.push_back($$);}
                ;

pixel           : PIXEL ID OPEN_BRACE r_stage_block CLOSE_BRACE {$$ = driver->createPixel(driver->createId(*$2),$4);driver->m_PTroot->m_children.push_back($$);}
                ;

type_constructor : TYPE OPEN_PAREN args CLOSE_PAREN { $$ = driver->createTypeConstructor(driver->createType(*$1),$3);}
                 ;

function_dcl    : variable_spec ID OPEN_PAREN arg_list CLOSE_PAREN {$$ = driver->createFuncDcl($1,driver->createId(*$2),*$4); driver->m_PTroot->m_children.push_back($$);}
                ;

function_def    : function_dcl r_block {$$ = driver->createFuncDef($1,$2); driver->m_PTroot->m_children.push_back($$);}
                ;

arg_list        : {$$ = new std::vector<HISL::PTArg>();}
                | arg {$$ = new std::vector<HISL::PTArg>(); $$->push_back(*$1);}
                | arg_list COMMA arg {$1->push_back(*$3);}
                ;

arg             : variable_spec {$$ = driver->createArg($1,NULL);}
                | variable_spec ID {$$ = driver->createArg($1,driver->createId(*$2));}
                ;

r_stage_block   : {$$ = driver->createBlock();}
                | r_stage_stmts {$$ = driver->createBlock(); $$->instructions.push_back($1);}
                | r_stage_block r_stage_stmts {$1->instructions.push_back($2);}
                ;

r_stage_stmts   : struct_node SEMICOLON{$$ = (HISL::PTStatement*)$1;}
                | STRUCT ID SEMICOLON {$$ = (HISL::PTStatement*)driver->createDeclaration(driver->createType("struct"),driver->createId(*$2));}
                | function_dcl SEMICOLON{$$ = $1;}
                | function_def {$$ = $1;}
                | unifrom_block SEMICOLON { $$ = $1;}
                | variable_declaration SEMICOLON {$$ = $1;}
                ;

unifrom_block   : UNIFORM ID OPEN_BRACE  CLOSE_BRACE{$$ = driver->createUniform(driver->createId(*$2),*new std::vector<HISL::PTStatement*>()); driver->m_PTroot->m_children.push_back($$);}
                | UNIFORM ID OPEN_BRACE struct_block CLOSE_BRACE{$$ = driver->createUniform(driver->createId(*$2),*$4); driver->m_PTroot->m_children.push_back($$);}
                ;

struct_block    : struct_stmts {$$ = $1;}
                ;
                
struct_stmts    : struct_stmt {$$ = new std::vector<HISL::PTStatement*>(); $$->push_back($1);}
                | struct_stmts struct_stmt {$1->push_back($2);}
                
struct_stmt     : variable_declaration SEMICOLON { $$ = $1; }
                ;
             
r_program_block : r_program_stmts {$$ = driver->createBlock(); $$->instructions.push_back($1);}
                | r_program_block r_program_stmts {$1->instructions.push_back($2);}
                ;

r_program_stmts : STRUCT ID SEMICOLON {$$ = driver->createDeclaration(driver->createType("struct"),driver->createId(*$2));}
                | IOBUFFER ID SEMICOLON {$$ = driver->createDeclaration(driver->createType("iobuffer"),driver->createId(*$2));}
                | iobuffer SEMICOLON {$$ = $1;}
                | struct_node SEMICOLON{$$ = $1;}
                | vertex SEMICOLON{$$ = $1;}
                | routine_node SEMICOLON {$$=$1;}
                | pixel SEMICOLON{$$ = $1;}
                ;
                
r_native_block  : GLSL OPEN_BRACE STRING CLOSE_BRACE {$$ = driver->createGLSL(*$3);}
                | HLSL OPEN_BRACE STRING CLOSE_BRACE {$$ = driver->createHLSL(*$3);}
                ;

r_block         : OPEN_BRACE CLOSE_BRACE {$$ = driver->createBlock();}
                | OPEN_BRACE stmts CLOSE_BRACE {$$ = driver->createBlock(); $$->instructions = *$2;}
                ;

stmts           : r_stmt { $$ = new std::vector<HISL::PTStatement*>(); $$->push_back($1);}
                | stmts r_stmt {$1->push_back($2);}
                ;

r_stmt          : expr_stmt {$$ = $1;}
                | variable_declaration SEMICOLON{ }
                | BUILTIN_VAR EQL expression SEMICOLON {$$ = driver->createConfigStatement(driver->createId(*$1),$3);}
                | r_jump_statement {$$ = $1;}
                | r_block {$$ = $1;}
                | r_selection_statement {$$ = $1;}
                | r_iteration_statement {$$ = $1;}
                | r_native_block SEMICOLON {$$ = $1;}
                ;
                
r_jump_statement : RETURN SEMICOLON {$$ = driver->createReturn(NULL);} 
                 | RETURN expression SEMICOLON {$$ = driver->createReturn($2);}
                 ;

expr_stmt       : expression SEMICOLON {$$ = driver->createExpressionStmt($1);}
                ;

expression      : assignment {$$ = $1;}
                | r_access_chain {$$ = $1;}
                | r_integer {$$ = $1;}
                | r_float {$$ = $1;}
                | expression r_binary_op expression {$$ = driver->createBinaryExp($1,$2,$3);}
                | unary_expr {$$ = $1;}
                | type_constructor {$$ = $1;}
                | OPEN_PAREN expression CLOSE_PAREN {$$ = $2;}
                ;

args            : {$$ = new std::vector<HISL::PTExpression*>();}
                | expression {$$ = new std::vector<HISL::PTExpression*>(); $$->push_back($1);}
                | args COMMA expression {$1->push_back($3);}
                ;

unary_expr      : NOT expression {$$ = driver->createUnaryExp(new std::string("!"),$2,false);}
                | INC expression {$$ = driver->createUnaryExp(new std::string("++"),$2,false);}
                | DEC expression {$$ = driver->createUnaryExp(new std::string("--"),$2,false);}
                | expression INC {$$ = driver->createUnaryExp(new std::string("++"),$1,true);}
                | expression DEC {$$ = driver->createUnaryExp(new std::string("--"),$1,true);}
                ;

r_binary_op     : PLUS {$$ = new std::string("+");}
                | MINUS {$$ = new std::string("-");}
                | MUL {$$ = new std::string("*");}
                | DEV {$$ = new std::string("/");}
                | MOD {$$ = new std::string("%");}
                | LEQL {$$ = new std::string("<=");}
                | GEQL {$$ = new std::string(">=");}
                | QEQL {$$ = new std::string("==");}
                | NOT_EQL {$$ = new std::string("!=");}
                | AND {$$ = new std::string("&&");}
                | OR {$$ = new std::string("||");}
                ;

assignment      : r_access_chain EQL expression { $$ = driver->createAssignment($1,"=",$3);}
                | r_access_chain PLUS_EQL expression {$$ = driver->createAssignment($1,"+=",$3);}
                | r_access_chain MINUS_EQL expression {$$ = driver->createAssignment($1,"-=",$3);}
                | r_access_chain DEV_EQL expression {$$ = driver->createAssignment($1,"/=",$3);}
                | r_access_chain MUL_EQL expression {$$ = driver->createAssignment($1,"*=",$3);}
                | r_access_chain MOD_EQL expression {$$ = driver->createAssignment($1,"%=",$3);}
                ;

r_access_chain : r_access_element {$1->op = ""; $$ = driver->createRAccessChain($1);}
               | r_access_chain DOT r_access_element {$3->op = ".";
                 auto it = $1->lval;
                 while(it!=NULL){
                   if(it->next == NULL)
                    break;
                   it = it->next;
                 } 
                 it->next = $3;
                 }
               ;

r_access_element : ID {$$ = driver->createRVarCall(*$1,"");}
                 | ID OPEN_BRACKET expression CLOSE_BRACKET {$$ = driver->createRArrayCall(*$1,$3,"");}
                 | ID OPEN_PAREN CLOSE_PAREN {$$ = driver->createRFunctionCall(*$1,new std::vector<HISL::PTExpression*>(),"");}
                 | ID OPEN_PAREN expression_list CLOSE_PAREN {$$ = driver->createRFunctionCall(*$1,$3,"");}
                 ;


r_buffer_block  : buffer_stmts {$$ = new std::vector<HISL::PTSemanticVariable>(); $$->push_back(*$1);}
                | r_buffer_block buffer_stmts {$1->push_back(*$2);}
                ;

buffer_stmts    : semantic_variable SEMICOLON {$$ = $1;}
                ;

semantic_variable : variable_spec ID COLON ID {$$ = driver->createSemanticVar($1,driver->createId(*$2),driver->createId(*$4));}
                  ;
                  
r_selection_statement: IF OPEN_PAREN expression CLOSE_PAREN r_stmt ELSE r_stmt {$$ = driver->createIf($3,$5,$7);}
                     | IF OPEN_PAREN expression CLOSE_PAREN r_stmt {$$ = driver->createIf($3,$5,NULL);}
                     ;

r_iteration_statement: WHILE OPEN_PAREN expression CLOSE_PAREN r_stmt {$$ = driver->createWhile($3,$5);}
                     | FOR OPEN_PAREN expr_stmt expr_stmt CLOSE_PAREN r_stmt {$$ = driver->createFor($3,$4,NULL,$6);}
                     | FOR OPEN_PAREN expr_stmt expr_stmt expression CLOSE_PAREN r_stmt {$$ = driver->createFor($3,$4,$5,$7);}
                     | FOR OPEN_PAREN variable_declaration SEMICOLON expr_stmt  CLOSE_PAREN r_stmt {$$ = driver->createFor($3,$5,NULL,$7);}
                     | FOR OPEN_PAREN variable_declaration SEMICOLON expr_stmt expression CLOSE_PAREN r_stmt {$$ = driver->createFor($3,$5,$6,$8);}
                     ;

variable_declaration : variable_spec init_declarator_list {$$ = driver->createVarDcl($1,driver->createVariableList($2));}
                     ;

init_declarator_list : init_declarator {$$ = new std::vector<HISL::PTInitDeclarator*>(); $$->push_back($1);}
                     | init_declarator_list COMMA init_declarator {$1->push_back($3);}
                     ;

initializer : expression {$$ = new std::vector<HISL::PTExpression*>(); $$->push_back($1);} 
            | OPEN_BRACE expression_list CLOSE_BRACE {$$ = $2;}
            ;

init_declarator : declarator {$$ = driver->createInitDeclarator($1,new std::vector<HISL::PTExpression*>());} 
                | declarator EQL initializer {$$ = driver->createInitDeclarator($1,$3);}
                ;

declarator : ID {$$ = driver->createDeclarator(NULL,*driver->createId(*$1),NULL);} 
           | ID post_op {$$ = driver->createDeclarator(NULL,*driver->createId(*$1),$2);}
           ;

expression_list : expression {$$ = new std::vector<HISL::PTExpression*>(); $$->push_back($1);} 
                | expression_list COMMA expression {$1->push_back($3);}
                ;

post_op : OPEN_BRACKET r_integer CLOSE_BRACKET {$$ = driver->createPostQualifier(true,$2->val);}
        ;

variable_spec   : TYPE {$$ = driver->createType(*$1);}
                | ID {$$ = driver->createType(*$1);}
                ;

r_integer       : INTEGER {$$ = driver->createInteger(*$1);}
                ;

r_float         : FLOAT {$$ = driver->createFloat(*$1);}
                ;

%%

void yyerror(std::string e){
  std::cerr<<e<<" at line: "<<*driver->m_location<<std::endl;
  exit(1);
}

void report(std::string e){
  std::cerr<<e<<std::endl;
}